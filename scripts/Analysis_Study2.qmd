---
title: "Cultural Normativity Index: Study 2"
format: 
   pdf:
     mainfont: Times
     mainfontoptions: 
       - Numbers=OldStyle
       - Ligatures=TeX
     monofontoptions: Scale=0.9 
     fontsize: 11.2pt
     code-block-font-size: 9pt
     toc: true
     number-sections: true
     number-depth: 3
     section-divs: true
     toc-depth: 3
     secnumdepth: 3
     execute:
       warning: false
       message: false
     code-block-wrap: true
     code-overflow: wrap
     prefer-html: true
     include-in-header: 
       text: |
         \usepackage[T1]{fontenc}
     documentclass: article
     geometry: margin=1in
     papersize: letter
     extra_dependencies: ["pdflscape", "booktabs", "longtable"]
editor: source
---

```{r Libraries}

#if (!require("pacman")) install.packages("pacman")
#pacman::p_install() #for installing libraries 

pacman::p_load(tidyverse, dplyr, rio, expss, scales, glue,
               rlang, kableExtra, stringr, tibble, psych, here,
               haven, parallel, tictoc, papaja, #wrangling and setup
               patchwork,gridExtra, ggplot2, grid, ggtext, tools, #plots
               lme4, lmerTest, broom.mixed, tidyr, #modeling - mlm
               emmeans, marginaleffects, modelsummary, 
               pbkrtest, car #model estimates
               )  
 
options(modelsummary_get = "easystats")
```

# Data cleaning

```{r data2-wrangle}

#---Data import
all_data2 <- import(here::here("data", "SWV2012.sav"), setclass = "tibble")

#get all factor levels
all_data2_factor_cols <- read_sav(here::here("data", "SWV2012.sav"))%>%
  mutate(across(c("Nation33", "Language", "D_SX",  "D_FH",  "D_ME",  "D_FE"), haven::as_factor)) %>% 
  select("Nation33", "Language", "D_SX",  "D_FH",  "D_ME",  "D_FE") %>% 
  tibble()

#attr(all_data2_spss$Nation33, "labels") 


#---Globe items rename

#Study1 pattern of Globe names, only pattern is similar the names here don't exactly map on the same variables as in Study 1
s1_GlobeNames <- c("g1igc1", "g1un1", "g1pf1", "g1ic1", "g1igc2", "g1un2", "g1igc3", "g1ge1", "g1po1", "g1un3", "g1igc4", "g2fu", "g2hu", "g2ass1", "g2fu1", "g2hu1", "g2po1", "g2ass2", "g2pf", "g2fu2", "g2hu2", "g2ge", "g2un3", "g2hu3", "g2po2", "g2fu3", "g2hu4", "g2po3", "g2ic2", "g2ge1", "g2pf2", "g2fu4", "g2pf3", "g3ic3", "g3ic4", "g3ic5", "g3ic6", "g3ass", "g3ass2", "g3ge", "g2po5", "g2po6", "g1un4")


#Study2 Globe names, these are replaced with the names above to replicate the coding style from Study1
s2_GlobeNames <- paste0("NO", 1:43)

#tibble(s2_GlobeNames, s1_GlobeNames) %>% View()

all_data2 <-  all_data2%>% 
  rename(!!!setNames(s2_GlobeNames, s1_GlobeNames)) 


#---Classify items for domains and compute scale scores for each domain

#This ensures that the items are correctly classified within their respective  domains
all_vars_d <- tibble(all_vars = names(all_data2)) %>%
    mutate(
    domain = case_when(
      str_starts(all_vars, "ISM") ~ "Isms",
      str_detect(all_vars, "^P\\d{1,2}") ~ "Personality6",
      str_starts(all_vars, "TL") ~ "Tight_Lose",
      str_starts(all_vars, "MT") ~ "Material",
      str_starts(all_vars, "AM") ~ "Amoralism",
      str_starts(all_vars, "IV") ~ "Fanaticism",
      str_detect(all_vars, "^VAL\\d{1,2}$") ~ "Values", #Schwartz
      str_detect(all_vars, "^M\\d{1,2}$") ~ "Machiavellianism",
      str_detect(all_vars, "^EN") ~ "Ethnonational",
      str_starts(all_vars, "IC") ~ "Indv_Collectivism",
      str_detect(all_vars, "^MF\\d{2}$") ~ "Moral_Foundations",
      str_starts(all_vars, "FV") ~ "Family_Values",
      str_detect(all_vars, "^PA\\d{1,2}$") ~ "Prone_Aggr",
      str_starts(all_vars, "g1|g2|g3") ~ "Globe", 
      str_detect(all_vars, "^NO(?:4[4-9])$") ~ "Globe_extra", 
      str_starts(all_vars, "Ax") ~ "Social_Axioms",
      #Duke Religiosity Index
      str_detect(all_vars, "^DRI\\d{2}$") ~ "DRI",
      TRUE ~ all_vars
    ))


  #all_vars_d %>% distinct(domain) %>% View()


#get all item numbers for each domain
item_names <- \(domain_name){
  all_item_names <- all_vars_d %>% 
  filter(domain == {{domain_name}}) %>% 
  pull(all_vars)
  return(all_item_names)
}


compute_trait_score <- function(data, pos_items, rev_items = NULL) {
  if (is.null(rev_items)) {
    # If no reverse items are specified, just sum the positive items
    return(rowSums(data %>% select(all_of(pos_items)), na.rm = TRUE))
  } else {
    # If both positive and reverse items are specified
    rowSums(
      data %>% 
        select(all_of(c(pos_items, rev_items))) %>%
      #here the items are assumed to be on the scale of 1 to 5;
      #this function is only applied after ensuring that all items are
      #are measured on or a rescaled to 1to5 
        mutate(across(all_of(rev_items), ~ 6 - .x)),
      na.rm = TRUE
    )
  }
}

```

```{r data2}
# convert any input into a character string
convert_to_char <- \(...) {
  expr <- enquos(...)
  char_vector <- map_chr(expr, quo_name)
  return(char_vector)
}

#---Compute scale scores
data2 <- bind_cols(
  all_data2_factor_cols,
  all_data2 %>% 
    select(D_AGE, 
      list_c(map(c("Isms","Globe","Globe_extra", "Tight_Lose", "Material","Social_Axioms", "Amoralism", "Fanaticism", "Ethnonational", "Indv_Collectivism", "Prone_Aggr", "Values", "Family_Values","Personality6", "DRI", "Moral_Foundations", "Machiavellianism"), item_names)))
) %>% 
  rename("country" = "Nation33",
         "language_admin" = "Language",
         "sex" = "D_SX",
         "family_home" = "D_FH", 
         "mother_edu" = "D_ME", 
         "father_edu" = "D_FE", 
         "age" = "D_AGE") %>% 
  #Retain countries with n >100 
  group_by(country) %>%
  filter(n() >= 100) %>%
  ungroup() %>% 
   # Drop rows with more than 10% missing data
  #filter(rowSums(is.na(.)) / ncol(.) <= 0.1)
#Rescale
  mutate(across(c(
    all_of(item_names("Values")),
    all_of(item_names("Isms")),
    all_of(item_names("Fanaticism")),
    all_of(item_names("Machiavellianism")),
    all_of(item_names("Moral_Foundations")),
    all_of(item_names("Globe")),
    all_of(item_names("Globe_extra")),
    all_of(item_names("Prone_Aggr")),
    all_of(item_names("Tight_Lose"))),
    # rescale all items from 1 to 5 for easy comparison
      ~scales::rescale(., to = c(1, 5))))  %>% 

  #-----[CNI ~ Continous moderators] -------#  
  
mutate(
#compute_trait_score(data, pos_items, rev_items)
    #Personality: pty6
scP_Consc.indv = compute_trait_score(.,
            paste0("P", c(1,13,25)), 
            paste0("P", c(7,19,31))),
scP_Hon.indv = compute_trait_score(.,
            paste0("P", c(11,17,29)), #, 38
            paste0("P", c(5,23,35))),
scP_Agree.indv = compute_trait_score(.,
            paste0("P", c(8,32)), 
            paste0("P", c(2,14,20,26))),
scP_Res.indv = compute_trait_score(.,
            paste0("P", c(12,36)), 
            paste0("P", c(6,18,24,30))),
scP_Extra.indv = compute_trait_score(.,
            paste0("P", c(3,15,27)), #,37
            paste0("P", c(9,21,33))), #,40
scP_Vir.indv = compute_trait_score(.,
            paste0("P", c(10,16,22,34)), #,39
            paste0("P", c(4,28))),

   #Personality: pty2
  #Social self-regulation
 scP_Big2_SocialSelfReg.indv = (compute_trait_score(.,
            paste0("P", c(5,8,9,25,30, 38)), 
            paste0("P", c(6,7,14,19,23))))/10,
 #Social Dynamism
 scP_Big2_Dynamism.indv = (compute_trait_score(.,
            paste0("P", c(10,15,34,36,37, 39, 24)), 
            paste0("P", c(9,28,30,40))))/10,

   #Moral Foundations
scC_MFQ_Harm.indv = compute_trait_score(.,
   c("MF01","MF07","MF12","MF18")),
scC_MFQ_Fairness.indv = compute_trait_score(.,
   c("MF02","MF08","MF13","MF19")),
scC_MFQ_Loyalty.indv = compute_trait_score(., 
   c("MF03","MF09","MF14","MF20")),
scC_MFQ_Authority.indv = compute_trait_score(.,
   c("MF04","MF10","MF15","MF21")),
scC_MFQ_Purity.indv = compute_trait_score(.,
   c("MF05","MF11","MF16","MF22")),

    
    #Cognitive: Social Axioms
  # Social Cynicism
scC_SocAx_Cynicism.indv = compute_trait_score(.,
   c("Ax5", "Ax12", "Ax16", "Ax23")),
  # Reward for Application
scC_SocAx_RewardForApp.indv = compute_trait_score(.,
   c("Ax4", "Ax9", "Ax13", "Ax21", "Ax28")),
  # Social Complexity
scC_SocAx_Complexity.indv = compute_trait_score(.,
   c("Ax6", "Ax8", "Ax10", "Ax15", "Ax19", "Ax22", "Ax25",
"Ax27", "Ax30")), 
  # Fate Control
scC_SocAx_FateControl.indv = compute_trait_score(.,
   c("Ax1", "Ax7", "Ax11", "Ax14", "Ax24")), 
  # Religiosity (importance of religion)
scC_SocAx_Religiosity.indv = compute_trait_score(.,
   c("Ax2", "Ax3", "Ax17", "Ax18", "Ax20", "Ax26", "Ax29"
)), 

      #Cognitive: Individualism Collectivism
scC_IndvColl_CollecHori.indv = compute_trait_score(.,
   c("IC14", "IC16", "IC4", "IC6")), 
scC_IndvColl_CollecVert.indv = compute_trait_score(.,
   c("IC10", "IC13", "IC2", "IC7")), 
scC_IndvColl_IndivHori.indv = compute_trait_score(.,
   c("IC1", "IC11", "IC5", "IC8")),
scC_IndvColl_IndivVert.indv = compute_trait_score(.,
   c("IC12", "IC15", "IC3", "IC9")),

      #Cognitive: Family Values
scC_FamValCohesion.indv = compute_trait_score(., c("FV02","FV04", "FV06", "FV08")),
scC_FamValHierarchy.indv = compute_trait_score(., c("FV01","FV03", "FV05", "FV07" )),

      #Cognitive: Schwartz Values
  #Self-Transcendence: Universalism + Benevolence
  scC_Value_SfTran.indv = compute_trait_score(.,c("VAL5", "VAL8")),

  #Conservation: Conformity + Tradition + Security
scC_Value_Consrv.indv = compute_trait_score(.,c("VAL4", "VAL1", "VAL7")),

  #Self-enhancement: Achievement + Power
scC_Value_SelfEnh.indv = compute_trait_score(.,c("VAL3", "VAL10")),

  #Openness to Change: Stimulation + Self-direction
scC_Value_OpnChg.indv = compute_trait_score(.,c("VAL9", "VAL2")),

   #Fanaticism
        scC_fntc.indv = compute_trait_score(.,
     item_names("Fanaticism")[-c(4,6,17)],
     item_names("Fanaticism")[c(4,6,17)]),

#dput(convert_to_char())

       #Cognitive: Isms
  #Traditional Religiousness
scC_Isms_TradRelig.indv = compute_trait_score(.,c("ISM12", "ISM17", "ISM22", "ISM35"), c("ISM14", "ISM16", "ISM30", "ISM8")),
  # Unmitigated Self-Interest
scC_Isms_UnmiSelfInt.indv = compute_trait_score(.,c("ISM11", "ISM3", "ISM32", "ISM4", "ISM41", "ISM42", "ISM46"), c("ISM21", "ISM26", "ISM7")),
  # Communal Rationalism
scC_Isms_CommRation.indv = compute_trait_score(.,c("ISM13", "ISM15", "ISM18", "ISM24", "ISM38", "ISM44"), c("ISM20", "ISM43")),
  # Subjective Spirituality
scC_Isms_SubjSpirit.indv = compute_trait_score(.,c("ISM10", "ISM39", "ISM5", "ISM6"), c("ISM2", "ISM23", "ISM25", "ISM27")),
  # Inequality Aversion
scC_Isms_IneqAver.indv = compute_trait_score(.,c("ISM19",  "ISM31", "ISM33", "ISM34", "ISM45"), c("ISM29", "ISM40")),

  #Cognitive: Materialism
scC_Material.indv = compute_trait_score(.,
item_names("Material")),

  #Cognitive: Machiavellianism
scC_Machiaveln.indv = compute_trait_score(., paste0("M", c(1,2,4)), paste0("M", c(3,5))),

   #Cognitive: Proneness to Aggression - Honor
scC_Prone_Aggr.indv = compute_trait_score(.,item_names("Prone_Aggr")),

   #Cognitive: Ethnonationalism
scC_Ethnonational.indv = compute_trait_score(., paste0("EN", c(1,3,4,6)), paste0("EN", c(2,5))),

  #Cognitive: Cultural Tightness
scC_Tightness.indv = compute_trait_score(., paste0("TL0", c(1,2,3,5,6)), "TL04"),

  #Cognitive: Amorialism
scC_Amoralism.indv = compute_trait_score(., item_names("Amoralism")[-c(1,4,6,8,10,11,13)],
 item_names("Amoralism")[c(1,4,6,8,10,11,13)]),

    #Cognitive: Duke Religion Index (DRI)
    # Organizational activity
scC_DRI_OrgRelgAc.indv =  compute_trait_score(., "DRI01"),
    # Non-organizational activity 
scC_DRI_NonOrgRelgAc.indv = compute_trait_score(., "DRI02"),
    # Intrinsic religiosity
scC_DRI_IntrnscRelg.indv = compute_trait_score(.,  paste0("DRI0", c(3,4,5))),
    # Civic Multicultural Nationalism
scC_CivicMCNational.indv = compute_trait_score(., "EN2", "EN5"),

      #Cognitive: GLOBE
    #InGroup Collectivism
scC_globe_igc.indv = compute_trait_score(.,
            str_subset(item_names("Globe"), "^g.*igc.*$")),
   # Institutional Collectivism
scC_globe_ic.indv = compute_trait_score(.,
            str_subset(item_names("Globe"), "^g.*ic.*$")[-c(3,4)], str_subset(item_names("Globe"), "^g.*ic.*$")[c(3,4)]),
    # Performance Orientation/Achievement
scC_globe_pf.indv = compute_trait_score(.,
            str_subset(item_names("Globe"), "^g.*pf.*$")[-4], 
            str_subset(item_names("Globe"), "^g.*pf.*$")[4]),
    # Uncertainty Avoidance
scC_globe_un.indv = compute_trait_score(.,
            str_subset(item_names("Globe"), "^g.*un.*$")[-5], 
            str_subset(item_names("Globe"), "^g.*un.*$")[5]),
    # Gender Egalitarian
scC_globe_ge.indv = compute_trait_score(.,
            str_subset(item_names("Globe"), "^g.*ge.*$")[-c(1,2,4)], 
            str_subset(item_names("Globe"), "^g.*ge.*$")[c(1,2,4)]),
    # Power Distance
scC_globe_po.indv = compute_trait_score(.,
            str_subset(item_names("Globe"), "^g.*po.*$")[-c(5,6)], 
            str_subset(item_names("Globe"), "^g.*po.*$")[c(5,6)]),
    # Future Orientation
scC_globe_fu.indv = compute_trait_score(.,
            str_subset(item_names("Globe"), "^g.*fu.*$")[-c(3,4)], 
            str_subset(item_names("Globe"), "^g.*fu.*$")[c(3,4)]),
    # Assertiveness
scC_globe_ass.indv = compute_trait_score(.,
            str_subset(item_names("Globe"), "^g.*ass.*$")[-c(2,3)], 
            str_subset(item_names("Globe"), "^g.*ass.*$")[c(2,3)]),
    # Humane Orientation
scC_globe_hu.indv = compute_trait_score(.,
            str_subset(item_names("Globe"), "^g.*hu.*$"))
) %>% 
  mutate(pID = paste0("p", 1:nrow(.)), .before = everything())%>% 
  
  #compute community[here, country] scale scores
  with_groups(country, 
    mutate,
    across(
      # Select all pty and cog scaled scores  
      contains(c( "scP", "scC")),
      # Compute mean by country
      ~mean(., na.rm = TRUE),
      # Create new name [scP_Hon.indv -> scP_Hon.comm]
      .names = "{str_remove(.col, '[.].*')}.comm"
    )
  ) %>% 
  
    #-----[CNI ~ Categorical moderators]------# 

#Demographic variables
mutate(
  mother_edu = case_when(
    str_detect(mother_edu, "don't know") ~ NA_character_,
    TRUE ~ as.character(mother_edu)
  ),
  father_edu = case_when(
    str_detect(father_edu, "don't know") ~ NA_character_,
    TRUE ~ as.character(father_edu)
  ),
  age_group = case_when(
    age >= 13 & age <= 17 ~ "13-17",
    age >= 18 & age <= 25 ~ "18-25",
    age >= 26 & age <= 35 ~ "26-35",
    age >= 36 & age <= 45 ~ "36-45",
    age >= 46 ~ "46+",
    TRUE ~ NA_character_
  ))%>%
  relocate(age_group, .before = age)
```

```{r DescriptiveTable, echo = F}
#| label: tbl-descriptive
#| tbl-cap: "Descriptive statistics for the whole sample"

data2 %>%
  select(sex, age_group, family_home, mother_edu, father_edu, language_admin)  %>%
  mutate(across(everything(), ~as.factor(.))) %>% 
  pivot_longer(cols = everything(), names_to = "variable", values_to = "category") %>%
  group_by(variable, category) %>%
  summarise(n = n(), .groups = "drop") %>%
  group_by(variable) %>%
  mutate(
    p = 100 * n / sum(n),
    sample = paste0(n, " (", papaja::printnum(p), "\\%)")) %>%
  ungroup() %>% 
  select(-n, -p) %>%
  #arrange(variable, category) %>%     
  mutate(
   category = if_else(is.na(category), "missing",     
       as.character(category)),
   variable = factor(variable, levels = c("sex", "age_group", "family_home", "mother_edu", "father_edu", "language_admin"))
  ) %>%
  arrange(variable) %>% 
  dplyr::select(-variable) %>% 
kable(longtable = T,
format = "latex",
align = c("l", "c", "c"), escape = FALSE,
col.names = c("Variable", "$\\textit{n}$ (\\%)"),
booktabs = TRUE) %>%
kable_styling(latex_options = c("repeat_header")) %>%
group_rows("Sex", 1, 3) %>%
group_rows("Age", 4, 8) %>%
group_rows("Family Home", 9, 13) %>%
group_rows("Mother's Education", 14, 23) %>%
group_rows("Father's Education", 24, 33) %>%
group_rows("Language of Administration", 34, 51) 
```

# RQ 1:  CNI models

```{r funs.-model_CNI}
#FUNCTIONS for computing CNIs

#Step1: gets item names for every CNI type
get_item_names <- \(CNI_type, data) {
  domains <- switch(CNI_type,
    "cog" = c("Isms", "Fanaticism", "Social_Axioms", "Values", "Tight_Lose", "Material", "Amoralism", "Ethnonational", "Indv_Collectivism", "Globe", "Globe_extra", "Moral_Foundations", "Family_Values","Machiavellianism","Prone_Aggr"),
    "pty6" = c("Personality6"),
    "Fanaticism" =c("Fanaticism"),
    "Isms" =c("Isms"),
    "Globe" =c("Globe"),
    "Globe_extra" =c("Globe", "Globe_extra"),
    "Moral_foundations" =c("Moral_Foundations"),
    "Social_Axioms" = c("Social_Axioms"),

    stop("CNI type not found")
  )
  
  item_names <- data %>% 
    filter(domain %in% domains) %>% 
    pull(all_vars)
  
  if (length(item_names) == 0) {
    warning("No items found for the specified domains")
  }
  
  return(item_names)
} 

#ipsatize/standardize scores
ipsatize <- \(x){
  value <- (x-mean(x, na.rm=T))/(sd(x, na.rm=T)) 
  return(value)
} 

#compute z_profiles for pID
compute_profiles <- \(var_names){
#compute mean country profiles
country_profiles <- data2 %>% 
  group_by(country) %>%
  summarise(
    across(all_of(var_names), ~mean(.x, na.rm = TRUE), .names = "avg_{.col}"),#variables for cogCNI
   n_p = n())%>% # number of participants) 
  ungroup() %>% 
  #retain participants who have responded to at least 30 items.- all countries have n_p>30
  filter(n_p>=30) %>% 
   pivot_longer(
    cols = starts_with("avg_"),
    #item names stored in item
    names_to = "item",
    values_to = "ctry_response"
  ) %>% 
   mutate(item = str_remove(item, "avg_")) %>% 
ungroup()

self.ctry_profiles <-  data2 %>%
  select(all_of(var_names), pID, country) %>%
  pivot_longer(names_to = "item",
               values_to = "response",
               cols = all_of(var_names)) %>% 
  filter(!is.na(response)) %>%
  left_join(country_profiles, by = c("country", "item")) %>%
   filter(!is.na(ctry_response)) %>%
# ipsatize responses within profile 
  with_groups(pID, mutate, across(
    # mutate self-rating and mean country profiles for each pID at once
  contains("response"),
  # with the ipsatize function ,
  ipsatize,
  # create new name
.names = "z_{.col}")) 

overallM_profiles <- self.ctry_profiles %>% 
  select(item, z_response) %>%
  filter(!is.na(z_response)) %>%
  group_by(item) %>%
  summarise(overall.M = mean(z_response)) %>% 
  ungroup() 


return(lst(self.ctry_profiles, overallM_profiles)) #set_names() to the input object names

} 
```

```{r CNI-profiles}
#get all item names for CNI types
cogCNI_items <- get_item_names("cog", all_vars_d)
pty6CNI_items <- get_item_names("pty6", all_vars_d)
ismCNI_items <- get_item_names("Isms", all_vars_d)
fantcCNI_items <- get_item_names("Fanaticism", all_vars_d)
globeCNI_items <- get_item_names("Globe", all_vars_d)
globeExCNI_items <- get_item_names("Globe_extra", all_vars_d)
mfCNI_items <- get_item_names("Moral_foundations", all_vars_d)
socAxCNI_items <- get_item_names("Social_Axioms", all_vars_d)

#compute pofiles for each CNI type
cogCNI_profiles <- compute_profiles(cogCNI_items)
pty6CNI_profiles <- compute_profiles(pty6CNI_items)
ismCNI_profiles <- compute_profiles(ismCNI_items)
fantcCNI_profiles <- compute_profiles(fantcCNI_items)
globeCNI_profiles <- compute_profiles(globeCNI_items)
globeExCNI_profiles <- compute_profiles(globeExCNI_items)
mfCNI_profiles <- compute_profiles(mfCNI_items)
socAxCNI_profiles <- compute_profiles(socAxCNI_items)
```

```{r DONT-RUN-fit-all-cni-mods, eval=FALSE, echo=TRUE}

#computing CNI
add_CNIformula <- \(data){
  lmer(z_response ~ z_ctry_response + overall.M + (-1 + z_ctry_response|country/pID), data = data)
  }

cogCNI_mod <- cogCNI_profiles$self.ctry_profiles %>% 
  full_join(cogCNI_profiles$overallM_profiles, by = "item") %>% add_CNIformula(.)
  
pty6CNI_mod <- pty6CNI_profiles$self.ctry_profiles %>% 
  full_join(pty6CNI_profiles$overallM_profiles, by = "item") %>% add_CNIformula(.)

ismCNI_mod <- ismCNI_profiles$self.ctry_profiles %>% 
  full_join(ismCNI_profiles$overallM_profiles, by = "item") %>% add_CNIformula(.)

fantcCNI_mod <- fantcCNI_profiles$self.ctry_profiles %>% 
  full_join(fantcCNI_profiles$overallM_profiles, by = "item") %>% add_CNIformula(.)

globeCNI_mod <- globeCNI_profiles$self.ctry_profiles %>% 
  full_join(globeCNI_profiles$overallM_profiles, by = "item") %>% add_CNIformula(.)

globeExCNI_mod <- globeExCNI_profiles$self.ctry_profiles %>% 
  full_join(globeExCNI_profiles$overallM_profiles, by = "item") %>% add_CNIformula(.)

mfCNI_mod <- mfCNI_profiles$self.ctry_profiles %>% 
  full_join(mfCNI_profiles$overallM_profiles, by = "item") %>% add_CNIformula(.)

socAxCNI_mod <- socAxCNI_profiles$self.ctry_profiles %>% 
  full_join(socAxCNI_profiles$overallM_profiles, by = "item") %>% add_CNIformula(.)
```

```{r save-CNImods, echo = F, eval = F}
save(cogCNI_mod, pty6CNI_mod, ismCNI_mod, fantcCNI_mod, globeCNI_mod, globeExCNI_mod, mfCNI_mod, socAxCNI_mod, 
     file = here("objects/Study2/all_CNI.mods_study2.Rdata"))
```

```{r load-CNImods, echo = F}
load(here("objects/Study2/all_CNI.mods_study2.Rdata"))
```


## CNI - heterogeneity

```{r fun.-heterogeneity}
# Function to calculate heterogeneity
compute_heterogeneity <- function(data) {
  # Compute correlation matrix once - memory efficient
  cor_matrix <- cor(data, use = "pairwise.complete.obs")
  
  pca_rotation <- function(rotation) {
    # Perform PCA using correlation matrix
    pca <- principal(cor_matrix, nfactors = ncol(data), rotate = rotation, covar = FALSE)
    
    # Calculate cumulative variance explained
    cumulative_var <- cumsum(pca$values) / sum(pca$values)
    
    # Find number of factors needed to explain at least 50% variance
    heterogeneity <- which(cumulative_var >= 0.5)[1]
    
    return(heterogeneity)
  }
  
  # Perform parallel analysis using correlation matrix
  pa_result <- fa.parallel(cor_matrix, n.obs = nrow(data), fa = "fa", fm = "minres", show.legend = FALSE, plot = FALSE)
  
  tibble(
    n_items = ncol(data),
    pa = pa_result$nfact,
    pca_50 = pca_rotation("none")
  )
}

```

```{r DONT-RUN-compute-heterogeneity, eval = F}
heterogeneity_stats <- map_dfr(
  list(
   Cognitive = select(data2, 
               get_item_names("cog",
                              all_vars_d)),
  Globe = select(data2,
                get_item_names("Globe",
                              all_vars_d)),
   Globe = select(data2,
                get_item_names(c("Globe_extra"),
                              all_vars_d)),
   Isms = select(data2,
                get_item_names("Isms",
                              all_vars_d)),
   Fanaticism = select(data2,
                get_item_names("Fanaticism",
                              all_vars_d)),
   Moral_foundations = select(data2,
                get_item_names("Moral_foundations",
                              all_vars_d)),
     Social_Axioms = select(data2,
                get_item_names("Social_Axioms",
                              all_vars_d)),
   Personality6 = select(data2,
                get_item_names("pty6",
                              all_vars_d))

  
),
 compute_heterogeneity, .id = "cni_type"
)
```

```{r save-compute-heterogeneity, echo = F, eval = F}
save(heterogeneity_stats, 
     file = here("objects/Study2/heterogeneity_stats_study2.Rdata"))
```

```{r load-compute-heterogeneity, echo = F}
load(here("objects/Study2/heterogeneity_stats_study2.Rdata"))
```

```{r tbl-heterogeneity}
heterogeneity_stats %>% 
   mutate(cni_type = str_replace_all(cni_type, "_", " ")) %>% 
  kable(booktabs = T, 
        escape = F,
        format = "latex",
        col.names = c("CNI type", "No. items", "Parallel analysis", "PCA"),
        caption = "Model complexity") %>% 
  kable_styling() %>% 
     group_rows("Cognitive", 1, 7) %>%
     group_rows("Personality", 8, 8) 
```

```{r plot-heterogeneity}
heterogeneity_stats %>%
  pivot_longer(cols = c(pa, pca_50), names_to = "metric", values_to = "value") %>%
  mutate(x_label = paste0(cni_type, "\n(", n_items, " items)")) %>% 
# Create the plot
ggplot(., aes(x = x_label, y = value, color = metric, group = metric)) +
  geom_line() +
  geom_point(size = 3) + 
  scale_color_manual(values = c("pa" = "#e78f8e", "pca_50" = "#93bfa6"),
                     labels = c("pa" = "Parallel Analysis", "pca_50" = "PCA 50%"),
                     name = "Metric") +
  labs(title = "Model Complexity Measures Across CNI Types",
       x = "CNI Type",
       y = "Number of Factors") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "bottom")

```

## CNI plots

```{r fun.-plot_CNI}
#Functions
#model1_est = tidy(model1, conf.int = T)

#this function does not work with map for some reason, the color mapping does not work!! 
plot_CNI <- function(model_obj) {
  # Get the name of the object passed to the function
  obj_name <- deparse(substitute(model_obj))
  
  # Extract the title (everything before the underscore)
  title <- str_extract(obj_name, "^[^_]+")
  
  # Define color mapping
  color_map <- tibble(
    mod_name = c("cogCNI", "ismCNI", "fantcCNI", "globeCNI", "globeExCNI", "mfCNI", "socAxCNI","pty6CNI"),
    color = c("#0074B7","#6082B6", "#70d6ff", "#a0c4ff","#189AB4", "#6495ED", "#5D3FD3", "#ff70a6")
  )
  
  # Determine the color based on the title
  plot_color <- color_map %>% 
    filter(str_detect(mod_name, title)) %>% 
    pull(color)
  
  model_obj= ismCNI_mod
  # Calculate slopes
  mod_slopes <- slopes(model_obj, variables = "z_ctry_response", by = "pID")
  
  coefficient_plot <- mod_slopes %>%
      ggplot(aes(x = reorder(pID, estimate), y = estimate)) +
      geom_segment(aes(xend = pID,
y = conf.low,yend = conf.high),
                   alpha = .08 , color = plot_color) +
      geom_point(size = .22, color = plot_color) +
      scale_x_discrete(breaks = NULL) +
      #coord_cartesian(ylim = c(-0.2, .92)) +
      labs(x = "Participant", y = "CNI coefficient", title = title) +
      theme_bw()
  
   hist_plot <- mod_slopes %>%
    as.data.frame() %>%
    ggplot(aes(x = estimate)) +
    geom_histogram(binwidth = .01, color = "white", fill = plot_color) +
    labs(x = "CNI coefficient", y = "Frequency", title = title) +
    scale_x_continuous(limits = c(-0.3, 0.92))+
    theme_bw()
  
  return(lst(coefficient_plot,hist_plot ))
}
```

```{r  DONT-RUN-CNIplots, echo = T, eval = FALSE}
#cogCNI_mod, pty6CNI_mod, ismCNI_mod, fantcCNI_mod, globeCNI_mod, globeExCNI_mod, mfCNI_mod, socAxCNI_mod

cogCNI_plot <- plot_CNI(cogCNI_mod) 
ismCNI_plot <- plot_CNI(ismCNI_mod) 
globeCNI_plot <- plot_CNI(globeCNI_mod)
globeExCNI_plot <- plot_CNI(globeExCNI_mod)
fantcCNI_plot <- plot_CNI(fantcCNI_mod)
mfCNI_plot <- plot_CNI(mfCNI_mod)
socAxCNI_plot <- plot_CNI(socAxCNI_mod)
pty6CNI_plot <- plot_CNI(pty6CNI_mod)
```

```{r save-CNImods_plots, echo = F, eval = F}
save(cogCNI_plot, ismCNI_plot, globeCNI_plot, globeExCNI_plot, fantcCNI_plot, mfCNI_plot, socAxCNI_plot, pty6CNI_plot,  
     file = here("objects/Study2/all_CNImods_plots_Study2.Rdata"))
```

```{r load-CNImods_plots, echo = F}
#takes time to load
load(here("objects/Study2/all_CNImods_plots_Study2.Rdata"))
```

```{r fun.-patch_CNIplots}
patch_CNIplots <- \(plot_list, title){
  
  p1 <- plot_list$coefficient_plot & 
  theme(plot.title = element_blank())
  
  p2 <- plot_list$hist_plot & 
  theme(plot.title = element_blank())
  
  combined_plot <- p1 + p2 +
    plot_annotation(title = title,
    theme = theme(plot.title = element_text(hjust = 0.5)))
  
  return(combined_plot)
}
```

```{r print-patch_CNIplots}
# Create a list of plot objects and their corresponding titles
CNIplot_data <- list(
  list(plot = cogCNI_plot, title = "Cognitive CNI"),
  list(plot = ismCNI_plot, title = "Isms-Cognitive CNI"),
  list(plot = globeCNI_plot, title = "Globe-Cognitive CNI"),
  list(plot = globeExCNI_plot, title = "Globe (Extra items)-Cognitive CNI"),
  list(plot = fantcCNI_plot, title = "Fanaticism-Cognitive CNI"),
  list(plot = mfCNI_plot, title = "Moral Foundations-Cognitive CNI"),
  list(plot = socAxCNI_plot, title = "Social Axioms-Cognitive CNI"),
  list(plot = pty6CNI_plot, title = "Personality6 CNI")
)

# Use walk to apply patch_CNIplots to each plot in the list and print quietly
walk(CNIplot_data, ~ {
  combined_plot <- patch_CNIplots(.x$plot, .x$title)
  print(combined_plot)
})
```




## CNI models summary

```{r DONT-RUN-create-tbl-cni-mods, echo = T, eval = F}
CNImods_table2 <- modelsummary(
  list("Cognitive" = cogCNI_mod,
       "Ism" = ismCNI_mod,
       "Globe" = globeCNI_mod,
       "Globe (Extra items)" = globeExCNI_mod,
       "Fanaticism" = fantcCNI_mod,
       "Moral Foundations" = mfCNI_mod,
       "Social Axioms" = socAxCNI_mod,
       "Big 6" = pty6CNI_mod), 
             estimate = "{estimate}{stars}",
             statistic = "[{conf.low}, {conf.high}]",
            # group = group + term ~ model, 
             coef_omit = "Intercept|^status",
             coef_rename = c(
              "z_ctry_response" = "CNI",
               "overall.M" = "Overall Mean Profile",
               "SD (z_ctry_response pIDcountry)" = "SD of CNI (across people)",
               "SD (z_ctry_response country)" = "SD of CNI (across country)",
               "SD (Observations)" = ""),
             gof_map = c("nobs"), 
             fmt = "%.2f",
             title = "Cultural Normativity Index",
             output = "kableExtra") %>% 
  kable_styling() %>% 
  add_header_above(c(" " = 1, 
                     "\textbf{Cognitive}" = 7, 
                     "\textbf{Personality}" = 1))
```

```{r save-CNItable, echo = F, eval = F}
save(CNImods_table2,
     file = here("objects/Study2/CNImods_table2.Rdata"))
```

```{r load-CNItable, echo = F}
load(here("objects/Study2/CNImods_table2.Rdata"))
```

\begingroup
\setlength{\LTleft}{0pt minus 500pt}
\setlength{\LTright}{0pt minus 500pt}
\fontsize{5pt}{7pt}\selectfont
\addtolength{\tabcolsep}{-3pt}

```{r}
CNImods_table2
```
\endgroup

## Country trends

```{r DONT-RUN-cni.ctry-trends, eval=F, echo=T}
#CNI country estimates from `slopes` (also can get CI's here) and `coef` (no CI's) are very close, both provide total effects (fixed+random)
#cogCNI_mod_ctry.slopes <- slopes(cogCNI_mod , variables = "z_ctry_response", by = "country")

all_mods_ctry.trends <- map_dfr(lst(
  cogCNI_mod, ismCNI_mod, fantcCNI_mod, globeCNI_mod, globeExCNI_mod, mfCNI_mod, socAxCNI_mod, pty6CNI_mod), 
                 ~slopes(., variables = "z_ctry_response", by = "country"), .id = "model") 

#all_mods_ctry.trends %>% View()
```

```{r fun.-oneCoef-plot, echo = F, eval = F}
#One coefficient plot at a time!
plotCNI_ctry_trends <- \(slope_data){
  
  obj_name <- deparse(substitute(slope_data))
  title <- str_extract(obj_name, "^[^_]+")
  
  plot <- slope_data %>% 
  as_tibble() %>% 
  select(country, estimate, conf.low, conf.high) %>% 
   ggplot(aes(x = reorder(country,estimate), y = estimate)) +
   geom_errorbar(aes(ymin = conf.low, ymax = conf.high),
                color = "grey") +
   geom_point() + 
   scale_y_continuous(limits = c(0, 1)) +
   labs(x = NULL, 
        y = "CNI",
        title = paste0(title, " estimates across countries")) +
   coord_flip() +
   theme_bw() +
   theme(plot.title.position = "plot")
  
  return(plot)
}
#plotCNI_ctry_trends(cogCNI_mod_ctry.slopes)
```

```{r save-country-trends, echo = F, eval = F}
save(all_mods_ctry.trends,
     file = here("objects/Study2/CNI-ctry-trends2.Rdata"))
```

```{r load-country-trends, echo = F}
load(here("objects/Study2/CNI-ctry-trends2.Rdata"))
```

```{r ctry-trends-2models-plot}
#| fig-height: 12
#| fig-width: 10
#| out-width: "100%"

all_mods_ctry.trends %>% 
  as_tibble() %>% 
  mutate(model = str_extract(model, "^[^_]+")) %>% 
  filter(model %in% c("cogCNI", "pty6CNI")) %>% 
  select(model, country, estimate, conf.low, conf.high) %>% 
  ggplot(aes(x = reorder(country, estimate), y = estimate, 
             color = model)) +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high),
                position = position_dodge(width = 0.5), 
                width = 0.3) +
  geom_point(position = position_dodge(width = 0.5), 
             size = 1.7)+ 
  scale_y_continuous(limits = c(0, 1)) +
  scale_color_manual(values = c("cogCNI" = "#0074B7", 
  "pty6CNI" = "#ff70a6")) + 
  labs(x = NULL, 
       y = "CNI",
       title = "CNI estimates across countries",
       color = "Model") +
  coord_flip() +
  theme_bw() +
  theme(plot.title.position = "plot",
        legend.position = "bottom")
```

```{r ctry-trends-8models-plot}
#| fig-height: 12
#| fig-width: 10
#| out-width: "100%"

all_mods_ctry.trends %>% 
  as_tibble() %>% 
  mutate(model = str_extract(model, "^[^_]+")) %>% 
  select(model, country, estimate, conf.low, conf.high) %>%
  mutate(alpha = ifelse(model %in% c("pty6CNI", "cogCNI"), 1, 0.5),
         errorbar_size = ifelse(model %in% c("pty6CNI", "cogCNI"), .8, 0.4)) %>%
  ggplot(aes(x = reorder(country, estimate), y = estimate, color = model, linetype = model)) +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high, alpha = alpha, size = errorbar_size),
                position = position_dodge(width = 0.5), width = 0.4) +
  geom_point(aes(alpha = alpha), 
             position = position_dodge(width = 0.5), 
             size = 1.7) +
  scale_y_continuous(limits = c(0, 1)) +
  scale_color_manual(values = c("cogCNI" = "#0074B7", "ismCNI"  = "#6082B6", "fantcCNI"  = "#70d6ff", "globeCNI"  = "#a0c4ff", "globeExCNI"  = "#189AB4", "mfCNI"  = "#6495ED", "socAxCNI"  = "#5D3FD3", "pty6CNI" = "#ff70a6")) +
  scale_alpha_identity() +
  scale_size_identity() +
  scale_linetype_manual(values = c("globeCNI"  ="dashed", "globeExCNI"  ="dashed","ismCNI"  ="dashed", "fantcCNI"  ="dashed",
"mfCNI"  = "dashed", "socAxCNI"  = "dashed",
     "cogCNI" = "solid", "pty6CNI" = "solid")) +
  labs(x = NULL, y = "CNI", title = "CNI estimates across countries",
       color = "Model") +
  coord_flip() +
  theme_bw() +
  theme(plot.title.position = "plot",
        legend.position = "bottom") +
  guides(linetype = "none", alpha = "none", linewidth = "none")
```





## RQ 2: CNI ~ Personality Continuous moderators


### Parallel Processing
```{r fun.-cni-ContMod-effects}
# Moderators here have to continuous, this won't work for categorical moderators
#Explanation for function below
      #[which CNI-type]:
  #cni_profiles_data <- cogCNI_profiles1$self.ctry_profiles 
      #[which moderator]:
  #modtr_pattern <- "^scP.*indv$" (scP = pty; scC = cog)
      #[causal relationship]:
  #CNI <- Continuous moderator

#This version of the function is specifically necessary for parallel processing! Here the modtr_patterns can be varied. The cognitive profiles are long and there are multiple moderators that need to be saved. This method works the best for this. 

cni.ContMod_effects <- function(cni_profiles_data, modtr_pattern) {
  
  # Determine the level based on the modtr_pattern
  level <- if(grepl("indv", modtr_pattern)) "Individual" else if(grepl("comm", modtr_pattern)) "Country" else "Unknown"

  #right data format
  cni.modtr_data <- data2 %>% 
    #select moderator scales individual level (pID) scores 
    #---$select moderators$ - specify regex
    select(pID, matches(modtr_pattern)) %>% 
    #mean centering the moderator score cols
    #since this standardization is col-wise, running pty7 is not an issue
    mutate_if(is.numeric, 
              ~. - mean(., na.rm = TRUE)) %>% 
    pivot_longer(-pID, 
                 names_to = "modtr", #moderator name
                 values_to = "modtr_score") %>% # moderator score
    full_join(cni_profiles_data, by = c("pID"), relationship = "many-to-many")
  
  #CNI <- moderator
  cni.modtr_models <- cni.modtr_data %>%
    tidyr::nest(data = -modtr) %>%
    mutate(
      #cni ~ mod
      mod.linear = map(data, ~lmer(z_response ~ z_ctry_response * modtr_score + (-1 + z_ctry_response | pID), data = .)),
      #cni ~ mod + mod^2
      mod.quadratic = map(data, ~lmer(z_response ~ z_ctry_response * modtr_score + z_ctry_response * I(modtr_score^2) + (-1 + z_ctry_response | pID), data = .)),
      
      #save results
      tidy_mod.linear = map(mod.linear, tidy, conf.int = TRUE),
      tidy_mod.quadratic = map(mod.quadratic, tidy, conf.int = TRUE)
    )
  
  results_linear <- cni.modtr_models %>% 
    select(modtr, tidy_mod.linear) %>% 
    unnest(cols = c(tidy_mod.linear)) %>%
    filter(term == "z_ctry_response:modtr_score") %>% 
    select(modtr, term, estimate, conf.low, conf.high, p.value)
  
  results_quadratic <- cni.modtr_models %>% 
    select(modtr, tidy_mod.quadratic) %>% 
    unnest(cols = c(tidy_mod.quadratic)) %>%
    filter(term == "z_ctry_response:I(modtr_score^2)") %>%
    select(modtr, term, estimate, conf.low, conf.high, p.value)
  
  output <- bind_rows(
    !!level := results_linear,
    !!level := results_quadratic,
    .id = "level"
  )
  
  return(output)
}

```


```{r table_contMods, echo=FALSE}
df <- data.frame(
  `Cognitive` = c(
    "[45indv + 46comm]",
    "cogCNI.cog",
    "ismCNI.cog",
    "globeCNI.cog",
    "globeExCNI.cog",
    "fantcCNI.cog",
    "mfCNI.cog",
    "socAxCNI.cog",
    "pty6CNI.cog"
  ),
  `Personality` = c(
    "[8indv + 8comm]",
    "cogCNI.pty",
    "ismCNI.pty",
    "globeCNI.pty",
    "globeExCNI.pty",
    "fantcCNI.pty",
    "mfCNI.pty",
    "socAxCNI.pty",
    "pty6CNI.pty"
  )
)

table_contMods <- kable(df, format = "pipe", align = c("c", "c")) %>%
  kable_styling(full_width = FALSE) %>%
  row_spec(0, bold = TRUE) %>%
  row_spec(1) %>%
  add_header_above(c(" " = 2), bold = TRUE)
```

 16 Tables for every CNI type 
 
 `r table_contMods`


Given the large _n_, especially for cogCNI profiles and the total number of moderators, it will be necessary to use parallel processing for this analysis. It significantly reduces computation time for multiple independent tasks.
Instead of splitting the data itself, which is common in parallel processing, we split the list of individual difference variables (e.g., those matching the pattern "^scC.*indv$"). We create chunks of these variables, distributed across the number of cores - 1. The function `cni.ContMod_effects` function is applied to each variable in `var_names` simultaneously across different cores. Each core processes a different moderator variable independently.

For the current study the hardware used involved 64GB RAM and 12 core processor, with the longest processing time for a model being 25mins (1529.822 sec elapsed). A motivated reader may choose to try to optimize this even further, in a more constrained environment. 

```{r parallel-processing-contMod, echo = F, eval = F}
# Load necessary libraries
library(furrr)
library(purrr)
library(tictoc)

# Set up parallel processing
plan(multisession, workers = availableCores() - 1)

tic()
# Get the list of moderator variables
patterns <- c("^scP.*indv$", "^scP.*comm$")
var_names <- grep(paste(patterns, collapse = "|"), names(data2), value = TRUE)

#checklist
#1. check if the patterns are correct 
    #["^scC" for cognitive moderators; "^scP" for personality moderators]
#2.change the name of the object
#3. change the data_profiles
#4. save the object in Study 2

# Parallel execution using furrr
pty6CNI.pty_effects<- future_map_dfr(var_names, function(var) {
  result <- cni.ContMod_effects(pty6CNI_profiles$self.ctry_profiles, var)
  result$variable <- var  # Add the variable name to the result
  return(result)
}, .progress = TRUE)


# Reset to sequential processing
plan(sequential)
toc()
```

```{r save-cni.ContMod-models, echo = F, eval = F}
#checklist 
#1. change name of the object  
#2. DANGER: change name of the objet being saved
#use the following to save each or collected chunks in the code above
save(pty6CNI.pty_effects,
     file = here("objects/Study2/pty6CNI.pty_effects.Rdata"))
```


```{r load-cni.ContMod-models, echo = F, results='hide'}

# Define a vector of file names
cni.contMod_object_names <- paste0(c(
  "cogCNI.cog",
  "cogCNI.pty",
  "ismCNI.cog",
  "ismCNI.pty",
  "globeCNI.cog",
  "globeCNI.pty",
  "globeExCNI.cog",
  "globeExCNI.pty",
  "fantcCNI.cog",
  "fantcCNI.pty",
  "mfCNI.cog",
  "mfCNI.pty",
  "socAxCNI.cog",
  "socAxCNI.pty",
  "pty6CNI.cog",
  "pty6CNI.pty"), "_effects.Rdata")

# Set file paths and set names
filepaths <- here("objects/Study2", cni.contMod_object_names) %>%
  set_names(nm = basename(.) %>% file_path_sans_ext())

# Load all files
all_cni.contMod_effects <- purrr::map(filepaths, ~get(load(.)))

# Assign loaded objects to global environment - important!
purrr::pmap(.l = list(.x = names(all_cni.contMod_effects), .y = all_cni.contMod_effects), .f = ~assign(.x, .y, envir = .GlobalEnv))

# Verify that objects are now in the global environment
#map_lgl(names(files), ~exists(.x, envir = .GlobalEnv))
```

Tables 

```{r fun.-specify-var-names}
#function to specify the correct variable names for all moderators [Pty + Cog]
specify_var_names <- \(data){
  data %>% 
    mutate(
    modtr = case_when(
      
      #Personality
      str_detect(modtr, "scP_Con") ~ "Conscientiousness",
      str_detect(modtr, "Hon") ~ "Honesty",
      str_detect(modtr, "Agr") ~ "Agreeableness",
      str_detect(modtr, "Res") ~ "Resilience",
      str_detect(modtr, "Ext") ~ "Extraversion",
      str_detect(modtr, "Vir") ~ "Originality/Virtuosity",
      str_detect(modtr, "SocialSelfReg") ~ "Social Self-Regulation",
      str_detect(modtr, "Dynamism") ~ "Social Dynamism",
      
      #Cognitive 
      
             #Isms
      str_detect(modtr, "Isms_TradRelig") ~ "Traditional Religiousness", 
      str_detect(modtr, "Isms_UnmiSelfInt") ~ "Unmitigated Self-Interest",
      str_detect(modtr, "CommRation") ~ "Communal Rationalism",
      str_detect(modtr, "SubjSpirit") ~ "Subjective Spirituality",
      str_detect(modtr, "IneqAver") ~ "Inequality Aversion",
  
         #GLOBE
      str_detect(modtr, "globe_igc") ~ "InGroup Collectivism",   
      str_detect(modtr, "globe_ic") ~ "Institutional Collectivism", 
      str_detect(modtr, "globe_pf") ~ "Performance/Achievement Orientation",
      str_detect(modtr, "globe_un") ~ "Uncertainty Avoidance", 
      str_detect(modtr, "globe_ge") ~ "Gender Egalitarian",
      str_detect(modtr, "globe_po") ~ "Power Distance",
      str_detect(modtr, "globe_fu") ~ "Future Orientation",
      str_detect(modtr, "globe_ass") ~ "Assertiveness",
      str_detect(modtr, "globe_hu") ~ "Humane Orientation",
    
        #Social Axioms
     str_detect(modtr, "SocAx_Cynicism") ~ "Social Cynicism",
     str_detect(modtr, "SocAx_RewardForApp") ~ "Reward for Application", 
     str_detect(modtr, "SocAx_Complexity") ~ "Social Complexity", 
     str_detect(modtr, "SocAx_FateControl") ~ "Fate Control",
  str_detect(modtr, "SocAx_Religiosity") ~ "Religiosity",
  
      #Moral Foundations
      str_detect(modtr, "MFQ_Harm") ~ "Harm",
      str_detect(modtr, "MFQ_Fairness") ~ "Fairness",
      str_detect(modtr, "MFQ_Loyalty") ~ "Loyalty",
      str_detect(modtr, "MFQ_Authority") ~ "Authority",
      str_detect(modtr, "MFQ_Purity") ~ "Purity",
  
     #Individualism-Collectivism (Gelfland)
  str_detect(modtr, "IndvColl_CollecHori") ~ "Horizontal Collectivism",
  str_detect(modtr, "IndvColl_CollecVert") ~ "Vertical Collectivism",
  str_detect(modtr, "IndvColl_IndivHori") ~ "Horizontal Individualism",
  str_detect(modtr, "IndvColl_IndivVert") ~ "Vertical Individualism",
  
  #Family Values
  str_detect(modtr, "FamValCohesion") ~ "Cohesion",
  str_detect(modtr, "FamValHierarchy") ~ "Hierarchy",
  
  #Schwartz Values
  str_detect(modtr, "Value_SfTran") ~ "Self Transcendence",
    str_detect(modtr, "Value_Consrv") ~ "Conservation",
  str_detect(modtr, "Value_SelfEnh") ~ "Self Enhancement",
  str_detect(modtr, "Value_OpnChg") ~ "Openness to Change",
   
  #Fanaticism
  str_detect(modtr, "fntc") ~ "Fanaticism",
      
  #Materialism
  str_detect(modtr, "Material") ~ "Materialism",
  
  #Machiavellianism
  str_detect(modtr, "Machiaveln") ~ "Machiavellianism",
  
  #Prone to Aggression (Honor)
   str_detect(modtr, "Prone_Aggr") ~ "Prone to Aggression",
  
  #Ethnonationalism
      str_detect(modtr, "Ethnonational") ~ "Ethnonationalism",
  
  #Tightness-Looseness
      str_detect(modtr, "Tightness") ~ "Tightness",
  
  #Amoralism
      str_detect(modtr, "Amoralism") ~ "Amoralism",
  
  #Duke Religiosity Index
    str_detect(modtr, "DRI_OrgRelgAc") ~ "Organizational Religious Activity",
    str_detect(modtr, "DRI_NonOrgRelgAc") ~ "Non-organizational Religious Activity",
    str_detect(modtr, "DRI_IntrnscRelg") ~ "Intrinsic religiosity",
      
    #Civic Multicultural Nationalism
      str_detect(modtr, "CivicMCNational") ~ "Civic Multicultural Nationalism",
  
      TRUE ~ modtr
    )
  ) 
}
```

```{r fun.-cni.ContMod-effects-table}
cni.ContMod_effects_table <- \(data, title){

df1 <- data %>% 
    #specify the correct variable/moderator name
    specify_var_names()%>% 
    mutate(
    p.value = map_chr(p.value, papaja::printp),
    across(where(is.numeric), ~ round(., 3)),
  ci = paste0("[", conf.low, ", ", conf.high,"]"),
         term = ifelse(str_detect(term, "2"), "Quadratic", "Linear"),
    estimate = as.character(estimate) 
  ) %>% 
  select(level, modtr, term, estimate, ci, p.value) %>% 
  pivot_longer(cols = c(estimate, ci, p.value),  names_to = "stat", values_to = "stat_value") %>% 
  unite(term, term, stat) %>% 
  pivot_wider(names_from = term, values_from = stat_value) %>% 
  select(-level)

 # Calculate the number of rows for each level
no.modtrs <- df1 %>% 
  distinct(modtr) %>% 
  nrow()

df1 %>% 
  kable(booktabs = T,
        longtable = T,
        escape = F,
        format = "latex",
        col.names = c(" ", "Est", "95\\% CI", "p", "Est", "95\\% CI", "p"),
        caption = title) %>% 
  kable_styling() %>% 
  add_header_above(c(" ", "Linear" = 3, "Quadratic" = 3)) %>% 
     group_rows("Individual level", 1, no.modtrs) %>% 
  group_rows("Country level", no.modtrs+1, no.modtrs*2) %>% 
  kable_styling(latex_options = c("repeat_header")) 
}
```

```{r cni.ContMod_names, echo=FALSE}
#cni.ContMod_effects_table(mfCNI.cog_effects, "title")
cni.ContMod_names <- tibble(objects = str_remove(cni.contMod_object_names, "\\.Rdata$")) %>% 
   mutate(object_x = str_remove(objects, "_effects$")) %>% 
  mutate(
    part1 = str_split_fixed(object_x, "\\CNI.", 2)[,1],
    part2 = str_split_fixed(object_x, "\\.", 2)[,2]
  ) %>% 
  mutate(part1 = case_when(
     part1 == "cog" ~ "Cognitive",
     part1 == "ism" ~ "Ism",
     part1 == "globe" ~ "Globe",
     part1 == "globeEx" ~ "Globe Extra",
     part1 == "fantc" ~ "Fanaticism",
     part1 == "mf" ~ "Moral Foundations",
     part1 == "socAx" ~ "Social Axioms",
     part1 == "pty6" ~ "Personality 6",
     TRUE ~ part2),
    
    part2 = case_when(
     part2 == "cog" ~ "Cognitive",
     part2 == "pty" ~ "Personality",
     TRUE ~ part2 )) %>% 
  mutate(title = paste0(part1, " CNI ~ ", part2)) %>% 
  select(objects, title)
```

```{r walk-cni.ContMod-effects-table, results='asis', echo=FALSE}

walk2(cni.ContMod_names$objects, cni.ContMod_names$title, function(obj, title) {
  cat("\n\n")  
  print(cni.ContMod_effects_table(get(obj), title))
  cat("\n\n") 
})
```


#Plots: cni.ContMod ~ effects
```{r fun.-cni.ContMod-effects-plot}
cni.pty_effects_plot <-\(data, title){

processed_data <- data %>% 
  #only linear effects
  filter(term == "z_ctry_response:modtr_score") %>% 
  specify_var_names() %>%
  with_groups(modtr, ~ mutate(.x, avg_abs_estimate = mean(abs(estimate)))) %>% 
  mutate(
    modtr = fct_reorder(modtr, avg_abs_estimate, .desc = FALSE),
    domain = case_when(
      modtr == "Conscientiousness" ~ "Big 6",
      modtr == "Honesty" ~ "Big 6",
      modtr == "Agreeableness" ~ "Big 6",
      modtr == "Resilience" ~ "Big 6",
      modtr == "Extraversion" ~ "Big 6",
      modtr == "Originality/Virtuosity" ~ "Big 6",
      modtr == "Social Self-Regulation"~ "Big 2",
      modtr == "Social Dynamism"~ "Big 2",
      TRUE ~ "Other"),
    sig = case_when(
      p.value < .05 & estimate > 0 ~ "Pos",
      p.value < .05 & estimate < 0 ~ "Neg",
      TRUE ~ "NOT")
  ) %>% 
    mutate(
      colors = case_when(
  domain == "Big 2" ~ "#377EB8",
   domain == "Big 6" ~ "#008f7a"
    ))


 base_plot <- ggplot(processed_data, aes(x = modtr, y = estimate, fill = domain, alpha = level)) +
  geom_col(position = position_dodge(width = 0.8)) +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), 
                position = position_dodge(width = 0.8),
                width = 0.25) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
 scale_fill_manual(values = setNames(processed_data$colors, processed_data$domain)) +
  scale_alpha_manual(values = c("Individual" = 1, "Country" = 0.4)) +
  labs(x = "Moderator", y = "Estimate",
       title = title,
       fill = "Trait", alpha = "Level") 

     get_color_mapping <- function(data) {
  data %>%
    arrange(desc(avg_abs_estimate)) %>%
    distinct(modtr, .keep_all = TRUE) %>%
    select(modtr, colors) %>%
    deframe()
}

# Get the color mapping
color_mapping <- get_color_mapping(processed_data)

 final_plot <- base_plot +
       # domain independent order
    theme_bw() +
    coord_flip()+
  theme(
    legend.position = "bottom",
    axis.text.y = element_markdown(
      color = color_mapping[levels(processed_data$modtr)],
      size = 8))
     
     return(final_plot)
}

cni.cog_effects_plot <- function(data, title, plot_type = c("domain dependent", "domain independent")) {
processed_data <- data %>%
   # only linear effects
    filter(term == "z_ctry_response:modtr_score") %>%
    specify_var_names() %>%
    with_groups(modtr, ~ mutate(.x, avg_abs_estimate = mean(abs(estimate)))) %>% 
    mutate(
      modtr = fct_reorder(modtr, avg_abs_estimate, .desc = FALSE),
      domain = case_when(
        str_detect(variable, "MFQ") ~ "Moral Foundations",
        str_detect(variable, "SocAx") ~ "Social Axioms",
        str_detect(variable, "globe") ~ "Globe",
        str_detect(variable, "Isms|CommRation|SubjSpirit|IneqAver") ~ "Isms",
        str_detect(variable, "IndvColl") ~ "Individualism-Collectivism",
        str_detect(variable, "FamVal") ~ "Family Values",
        str_detect(variable, "Value") ~ "Schwartz Values",
        str_detect(variable, "fntc") ~ "Fanaticism",
        str_detect(variable, "Material") ~ "Materialism",
        str_detect(variable, "Machiaveln") ~ "Machiavellianism",
        str_detect(variable, "Prone_Aggr") ~ "Prone to Aggression",
        str_detect(variable, "Ethnonational") ~ "Ethnonationalism",
        str_detect(variable, "Tightness") ~ "Tightness-Looseness",
        str_detect(variable, "Amoralism") ~ "Amoralism",
        str_detect(variable, "DRI") ~ "Duke Religiosity Index",
        str_detect(variable, "CivicMCNational") ~ "Civic Multicultural Nationalism",
        TRUE ~ "OTHER"),
      sig = case_when(
        p.value < .05 & estimate > 0 ~ "Pos",
        p.value < .05 & estimate < 0 ~ "Neg",
        TRUE ~ "NOT")
    ) %>% 
    mutate(
      colors = case_when(
        str_detect(domain, "Isms") ~ "#7F0000",
        str_detect(domain, "Globe") ~ "#377EB8",
        str_detect(domain, "Social Axioms") ~ "#4DAF4A",
        str_detect(domain, "Moral Foundations") ~ "#984EA3",
        str_detect(domain, "Individualism-Collectivism") ~ "#FF7F00",
        str_detect(domain, "Family Values") ~ "#DAA520",
        str_detect(domain, "Schwartz Values") ~ "#A65628",
        str_detect(domain, "Fanaticism") ~ "#196569",
        str_detect(domain, "Materialism") ~ "#F781BF",
        str_detect(domain, "Machiavellianism") ~ "#8f8d2f",
        str_detect(domain, "Prone to Aggression") ~ "#E41A1C",
        str_detect(domain, "Ethnonationalism") ~ "#00FF00",
        str_detect(domain, "Tightness-Looseness") ~ "#8B4513",
        str_detect(domain, "Amoralism") ~ "#00FFFF",
        str_detect(domain, "Duke Religiosity Index") ~ "#FF1493",
        str_detect(domain, "Civic Multicultural Nationalism") ~ "#1da87e",
        TRUE ~ "#000000"
      )
    )

  base_plot <- ggplot(processed_data, aes(x = modtr, y = estimate, fill = domain, alpha = level)) +
    geom_col(position = position_dodge(width = 0.8)) +
    geom_errorbar(aes(ymin = conf.low, ymax = conf.high), position = position_dodge(width = 0.8), width = 0.25) +
    geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
    scale_fill_manual(values = setNames(processed_data$colors, processed_data$domain)) +
    scale_alpha_manual(values = c("Individual" = 1, "Country" = 0.4)) +
    labs(x = "Moderator", y = "Estimate", title = title, fill = "Trait", alpha = "Level")
    
    #add here different plot versions
    
  if(plot_type=="domain dependent"){
    final_plot <- base_plot +
      labs(caption = paste(toTitleCase(plot_type), "view"))+
        #domain dependent order
   scale_x_discrete(
    limits = unique(processed_data$modtr),
    labels = function(x) {
      sapply(x, function(label) {
        color <- processed_data$colors[processed_data$modtr == label][1]
        sprintf("<span style='color: %s'>%s</span>", color, label)
      })
    }
  ) +
  theme_bw() +
  theme(
    legend.position = "bottom",
    axis.text.y = element_markdown(size = 8)  # Adjust size as needed
  ) +
  coord_flip()
  }else if(plot_type=="domain independent"){
    
    get_color_mapping <- function(data) {
  data %>%
    arrange(desc(avg_abs_estimate)) %>%
    distinct(modtr, .keep_all = TRUE) %>%
    select(modtr, colors) %>%
    deframe()
}

# Get the color mapping
color_mapping <- get_color_mapping(processed_data)

     final_plot <- base_plot +
      labs(caption = paste(toTitleCase(plot_type), "view"))+
       # domain independent order
    theme_bw() +
    coord_flip()+
  theme(
    legend.position = "bottom",
    axis.text.y = element_markdown(
      color = color_mapping[levels(processed_data$modtr)],
      size = 8
    ))
  }else{
    stop("Invalid plot type. Choose either 'domain dependent' or 'domain independent'.")
  }
return(final_plot)

}
```

```{r walk-cni.ptyContMod-effects-plot1, results='asis', echo=FALSE}
#| fig-height: 10
#| fig-width: 10
#| out-width: "100%"
cni.ContMod_names %>%
  filter(str_detect(objects, "\\.pty_effects$")) %>% 
  {walk2(.$objects, .$title, function(obj, title) {
    cat("\n\n")  
    print(cni.pty_effects_plot(get(obj), title))
    cat("\n\n") 
  })}
```

## Plots: [cognitive moderators] domain independent view
```{r walk-cni.cogContMod-effects-plot1, results='asis', echo=FALSE}
#| fig-height: 15
#| fig-width: 10
#| out-width: "100%"

#retain models that have cognitive moderators
cni.ContMod_names %>%
  filter(str_detect(objects, "\\.cog_effects$")) %>% 
  {walk2(.$objects, .$title, function(obj, title) {
    cat("\n\n")  
    print(cni.cog_effects_plot(get(obj), title, "domain independent"))
    cat("\n\n") 
  })}
```

## Plots: [cognitive moderators] domain dependent view
```{r walk-cni.cogContMod-effects-plot2, results='asis', echo=FALSE}
#| fig-height: 15
#| fig-width: 10
#| out-width: "100%"

#retain models that have cognitive moderators
cni.ContMod_names %>%
  filter(str_detect(objects, "\\.cog_effects$")) %>% 
  {walk2(.$objects, .$title, function(obj, title) {
    cat("\n\n")  
    print(cni.cog_effects_plot(get(obj), title, "domain dependent"))
    cat("\n\n") 
  })}
```

#"Moderating effects on CNI: Individual vs Community"


# cogCNI x Categorical moderators

cogCNI being the most complex model, it required a different approach for running parallel processing. Here the models are computed first followed by assesing the contrasts between different groups. 

```{r cogCNI.catMod-models}
cni.CatMod_effects_models <- function(cni_profiles_data, modtr_cat) {
  
  #consists of self,ctry and overall.M profiles
  joined_profiles <- pluck(cni_profiles_data, "self.ctry_profiles") %>%
  left_join(pluck(cni_profiles_data, "overallM_profiles"), by = "item")

  #right data format
  cni.modtr_data <- data2 %>% 
    #select moderator scales individual level (pID) scores 
    select(pID, modtr_cat) %>% 
    pivot_longer(-pID, 
                 names_to = "modtr", #moderator name
                 values_to = "modtr_score") %>% # moderator score
    full_join(joined_profiles, by = c("pID"), relationship = "many-to-many")
  
  #CNI <- moderator
  cni.modtr_model <- cni.modtr_data %>%
      #cni ~ mod [linear]
      lmer(z_response ~ z_ctry_response * modtr_score + overall.M + (-1 + z_ctry_response | pID), data = .)
  
  return(cni.modtr_model)
}
```

```{r parallel-processing-cogCNI.catMod, echo = F, eval = F}
# Hardware: 12 cores, 62GB RAM

# Load necessary libraries
library(furrr);library(purrr);library(tictoc)
library(car)
emm_options(pbkrtest.limit = 521388) #emtrends setting

# Set up cores
  plan(multisession, workers = availableCores() - 1)

tic()
# All categorical moderator variables
  var_names <- c("sex", "age_group",
                 "mother_edu","father_edu",
                 "family_home")

# Parallel execution using furrr
  cogCNI.CatMod_effects_models<- future_map(var_names, function(var) {
    result <- cni.CatMod_effects_models(cogCNI_profiles, var)
    return(result)
  }, .progress = TRUE) %>% 
    set_names(var_names)
  
  cogCNI.CatMod_effects_models$father_edu %>% #object.size()
    tidy() %>% 
    object.size()


# Reset to sequential processing
plan(sequential)
toc()

#object diagnostics:
  #library(pryr)
  #rm(globeExCNI.cat_effects)
  #object_size(fantcCNI.cat_effects)
  #object_size(globeExCNI.cat_effects$father_edu)
```

```{r save-cog.cni.CatMod-models, echo = F, eval = F}
#checklist 
#1. change name of the object  
#2. DANGER: change name of the object being saved
#use the following to save each or collected chunks in the code above
save(cogCNI.CatMod_effects_models,
     file = here("objects/Study2/cogCNI.CatMod_effects_models.Rdata"))
```

```{r echo = F, eval=TRUE}
load("~/Desktop/CNI_Dissertation/objects/Study2/cogCNI.CatMod_effects_models.Rdata")
```

```{r cogCNI.catMod-trends}
cni.CatMod_effects_trends <- \(cni.modtr_model) {

   #2. contrasts
  trends <- emtrends(cni.modtr_model, pairwise ~ modtr_score,
  var = "z_ctry_response",
  adjust = "holm")
  
  return(trends)
}
cogCNI.CatMod_effects_trends <- map(cogCNI.CatMod_effects_models, cni.CatMod_effects_trends)
```

```{r fun.-sig_groups1, echo = FALSE}
sig_groups1 <- \(df, var, cni_name, sig.only = FALSE) {

  # Extract the part of cni_name before the first period
  cni_name_cap <- str_extract(cni_name, "^[^.]+")
  #age_group -> "Age group"
  var_name_cap <- var %>%
    str_replace_all("_", " ") %>%
    str_to_title()

    trends <- df %>% 
      pluck(var, "contrasts") %>% 
      as.data.frame()
 
  
  cap <-paste0("Significant differences in ", cni_name, " by ", var_name_cap, ".")
  
  if (sig.only) {
    trends <- filter(trends, p.value < .05)
     cap <-paste0("Significant differences in ", cni_name, " by ", var_name_cap, ".")
  
  }
  
  if (nrow(trends) > 0) {
    trends %>% 
      mutate(
        p.value = papaja::printp(p.value),
        across(where(is.numeric), printnum)
      ) %>% 
      select(-df) %>% 
      kable(booktabs = T,
            caption = cap,
            longtable = T) %>% 
      kable_styling(latex_options = c("repeat_header")) %>% 
      column_spec(1, width = "5cm")
  }
}
```

```{r cogCNI.catMod-trends-plots, results='asis'}
# Moderator names
var_names <- c("sex", "age_group", "mother_edu", "father_edu", "family_home")

# Print all the tables
walk(var_names, function(var) {
  cat("\n\n")
  print(sig_groups1(cogCNI.CatMod_effects_trends, var, "cogCNI"))
  cat("\n\n")
})
```


```{r}
#| include: false
#knitr::opts_chunk$set(eval = FALSE)
```

Here one function computes the model, assesses the model fit using the Type III sum of squares (of interest is to what extent does the moderator interaction explain variability in the model, above and beyond other main and random effects). The significant contrasts for each model are retained. 

```{r fun.-cni-CatMod-effects, echo= T, eval=F}
#Explanation for function below
      #[which CNI-type]:
  #cni_profiles_data <- cogCNI_profiles1 [self.ctry_profiles,overallM_profiles] 
      #[which moderator]:
  # "sex","family_home","mother_edu","father_edu","age_group"    
  #Model: CNI <- Categorical moderator

#levels(factor(data2$father_edu)) #how many levels?
#choose(9, 2) #check for number of contrasts

#This version of the function is necessary for parallel processing! Moderators are varied. 

cni.CatMod_effects <- function(cni_profiles_data, modtr_cat) {
  
  #consists of self,ctry and overall.M profiles
  joined_profiles <- pluck(cni_profiles_data, "self.ctry_profiles") %>%
  left_join(pluck(cni_profiles_data, "overallM_profiles"), by = "item")

  #right data format
  cni.modtr_data <- data2 %>% 
    #select moderator scales individual level (pID) scores 
    select(pID, modtr_cat) %>% 
    pivot_longer(-pID, 
                 names_to = "modtr", #moderator name
                 values_to = "modtr_score") %>% # moderator score
    full_join(joined_profiles, by = c("pID"), relationship = "many-to-many")
  
  #1. CNI <- moderator
  cni.modtr_model <- cni.modtr_data %>%
      #cni ~ mod [linear]
      lmer(z_response ~ z_ctry_response * modtr_score + overall.M + (-1 + z_ctry_response | pID), data = .)
      
      #save results
  #2. model fit   
   model_fit <- Anova(cni.modtr_model, type = "III", test.statistic = "F") %>%                     tidy()
   #3. contrasts
   trends <- emtrends(cni.modtr_model, pairwise ~ modtr_score, 
         var = "z_ctry_response", 
         adjust = "holm") 
      
  
  return(lst(model_fit,trends))
}
```

```{r parallel-processing-catMods, echo = F, eval = F}
#This code chunk is representative of the 
# Hardware specifications: 12 cores, 62 GB RAM

# Load necessary libraries
library(furrr);library(purrr);library(tictoc)
library(car)
emm_options(pbkrtest.limit = 521388) #emtrends setting

# Set up cores
  plan(multisession, workers = availableCores() - 1)

tic()
# All categorical moderator variables
  var_names <- c("sex", "age_group" , "mother_edu","father_edu",
                 "family_home")

#checklist
#1. change the name of the object according to the CNI being used
#2. change the data_profiles object name
#3. save the object in Study 2
  
  #pty6

# Parallel execution using furrr
  pty6CNI.cat_effects<- future_map(var_names, function(var) {
    result <- cni.CatMod_effects(pty6CNI_profiles, var)
    return(result)
  }, .progress = TRUE) %>% 
    set_names(var_names)


# Reset to sequential processing
plan(sequential)
toc()

#object diagnostics:
  #library(pryr)
  #rm(globeExCNI.cat_effects)
  #object_size(fantcCNI.cat_effects)
  #object_size(globeExCNI.cat_effects$father_edu)
```

```{r save-cni.CatMod-models, echo = F, eval = F}
#checklist 
#1. change name of the object  
#2. DANGER: change name of the object being saved
#use the following to save each or collected chunks in the code above
save(pty6CNI.cat_effects,
     file = here("objects/Study2/pty6CNI.cat_effects.Rdata"))
```

```{r load-cni.CatMod-models, echo=F, eval=T, results='hide'}
# Define a vector of file names
cni.catMod_object_names <- paste0(c(
  "ismCNI",
  "globeCNI",
  "globeExCNI",
  "fantcCNI",
  "mfCNI",
  "socAxCNI",
  "pty6CNI"), ".cat_effects.Rdata")

# Set file paths and set names
filepaths <- here("objects/Study2", cni.catMod_object_names) %>%
  set_names(nm = basename(.) %>% tools::file_path_sans_ext())

# Load all files
all_cni.catMod_effects <- purrr::map(filepaths, ~get(load(.)))

# Assign loaded objects to global environment - important!
purrr::pmap(.l = list(.x = names(all_cni.catMod_effects), .y = all_cni.catMod_effects), .f = ~assign(.x, .y, envir = .GlobalEnv))

# Verify that objects are now in the global environment
#map_lgl(names(all_cni.catMod_effects), ~exists(.x, envir = .GlobalEnv))
```

```{r fun.-sig_groups2, results = 'asis', echo = FALSE}
# Modify sig_groups2 function
sig_groups2 <- function(CNI.cat_effects, var, cni_name, sig.only = FALSE) {
   # Extract the part of cni_name before the first period
  cni_name_cap <- str_extract(cni_name, "^[^.]+")
  #age_group -> "Age group"
  var_name_cap <- var %>%
    str_replace_all("_", " ") %>%
    str_to_title()
  
  trends <- CNI.cat_effects %>% 
    #all_cni.catMod_effects %>% 
    pluck(cni_name,var, "trends", "contrasts") %>% 
    #pluck("ismCNI.cat_effects" , "age_group", "trends", "contrasts")
    as.data.frame()

  cap <-paste0("Significant differences in ", cni_name_cap, " by ", var_name_cap, ".")
  
  
  if (sig.only) {
    trends <- filter(trends, p.value < .05)
    cap <-paste0("Significant differences in ", cni_name_cap, " by ", var_name_cap, ".")
  }
  
  if (nrow(trends) > 0) {
    trends %>% 
      mutate(
        p.value = papaja::printp(p.value),
        across(where(is.numeric), printnum)
      ) %>% 
      select(-df) %>% 
      kable(booktabs = T,
            caption = cap,
            longtable = T) %>% 
      kable_styling(latex_options = c("repeat_header")) %>% 
      column_spec(1, width = "5cm")
  }
}
```

```{r cni.catMod_effects_tables, results = 'asis'}
# categorical moderators
var_names <- c("family_home", "mother_edu", "father_edu", "age_group")

# CNI names (adjust this list according to your needs)
cni_names <- names(all_cni.catMod_effects)

# Iterate over both cni_names and var_names
walk(cni_names, function(cni) {
  walk(var_names, function(var) {
    result <- sig_groups2(all_cni.catMod_effects, var, cni)
    if (!is.null(result)) {
      print(result)
      cat("\n\n")  # Add some space between tables
    }
  })
})
```



