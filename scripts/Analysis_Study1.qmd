---
title: "Cultural Normativity Index: Study 1"
format: 
  pdf:
    prefer-html: true
    mainfont: Times
    mainfontoptions: 
       - Numbers=OldStyle
       - Ligatures=TeX
    monofontoptions: Scale=0.9 
    fontsize: 11.2pt
    code-block-font-size: 9pt
    toc: true
    number-sections: true
    number-depth: 3
    section-divs: true
    toc-depth: 3
    secnumdepth: 3
    lof: true
    lot: true
    lof-title: "List of Figures"
    execute:
       warning: false
       message: false
    code-block-wrap: true
    code-overflow: wrap
    include-in-header: 
      text: |
         \usepackage[T1]{fontenc}
    documentclass: article
    geometry: margin=1in
    papersize: letter
    keep-tex: true
    crossref:
      fig-prefix: "Figure"
      lof-title: "List of Figures"
    extra_dependencies: ["pdflscape", "booktabs", "longtable"]
editor: source
---

# Data

## Libraries

```{r Libraries}
pacman::p_load(tidyverse, dplyr, rio, expss, scales, glue,
               rlang, kableExtra, stringr, tibble, psych, here, webshot2,
              lavaan,semTools,#Measurement Invariance
               haven, parallel, tictoc, papaja, #wrangling and setup
               patchwork,gridExtra, ggplot2, grid, ggtext, tools, #plots
               lme4, lmerTest, broom.mixed, tidyr, #modeling - mlm
               emmeans, marginaleffects, modelsummary, 
               pbkrtest, car #model estimates
               )  
 
options(modelsummary_get = "easystats")
```


## Data import and set up
The data, originally in the .sav format, is identified by labels for each set of items. Scale scores for individual and community (here, country) level are computed for each measure. 

```{r data1}
#Study1 = data1
all_data1 <- import(here::here("data", "mcvs8_2839mv3ssvsrm2partlyreduced.sav"), setclass = "tibble")

#This ensures that the items are correctly classified within their respective  domains
all_vars_d <- tibble(all_vars = names(all_data1)) %>%
    mutate(
    domain = case_when(
      str_starts(all_vars, "ism") ~ "Isms",
      str_starts(all_vars, "f_") ~ "Fanaticism",
      str_detect(all_vars, "^ssvs\\d{1,2}$") ~ "Values",
      str_starts(all_vars, "sc_p") ~ "Personality_scale",
      str_starts(all_vars, "p_") ~ "Personality6",
      str_starts(all_vars, "d_") ~ "Personality7",
      str_starts(all_vars, "sacy") ~ "Social_Axioms",
      str_starts(all_vars, "swb") ~ "SWB",
      str_starts(all_vars, "g1|g2") ~ "Globe",
      str_starts(all_vars, "fsp") ~ "Failed_state_perception",
      TRUE ~ all_vars
    ))


#func for fanaticsim [naming of items was needed]
get_fntc_items <- function(item.code1, item.code2 = NULL) {
  
  all_fantc_items <- all_vars_d %>% 
    filter(domain == "Fanaticism") %>% 
    mutate(
      rev_scoring = case_when(
        all_vars %in% c("f_gc22", "f_gc24","f_gc32", "f_gk48", 
                        "f_ls54",  "f_gc56", "f_gc57","f_ls60", "f_gk66", "f_ls66",
                        "f_gc69", "f_gc72", "f_gc80","f_gc81", "f_gk85", "f_gk92",
                        "f_gk93", "f_ls98", "f_ls100", "f_ls109") ~ "rev",
        TRUE ~ "pos"
      ),
      subscale = case_when(
        all_vars %in% c("f_gc89", "f_gc4", "f_gk111", "f_gc27", 
                        "f_gk20", "f_gc68") ~ "vile_world",
        all_vars %in% c("f_gc69", "f_ls22", "f_gk48" ,"f_ls95", 
                        "f_gk88", "f_gk44", "f_gk82", "f_ls125", "f_ls56",
                        "f_gc56") ~ "proviolence",
        all_vars %in% c("f_gc72", "f_gc47", "f_gk92", "f_ls107", "f_gk67", "f_gc57", "f_gc17") ~ "divine_power",
        TRUE ~ NA_character_ 
      ),
      theme = case_when(
        str_detect(all_vars, "ls") ~ "islam_extrm",
        str_detect(all_vars, "gk") ~ "yug_extrm",
        str_detect(all_vars, "gc") ~ "pan_extrm",
        TRUE ~ NA_character_  
      )
    ) %>% 
    mutate(code = paste0(theme,".", subscale, ".",rev_scoring)) %>% 
    select(all_vars, code)
  
  # Filter based on one or two patterns
  if (is.null(item.code2)) {
    items <- all_fantc_items %>%
      filter(str_detect(code, item.code1)) %>%
      pull(all_vars)
  } else {
    items <- all_fantc_items %>%
      filter(str_detect(code, item.code1) & str_detect(code, item.code2)) %>%
      pull(all_vars)
  }
  
  return(items)
}

#get all item numbers for each domain
item_names <- \(domain_name){
  all_item_names <- all_vars_d %>% 
  filter(domain == {{domain_name}}) %>% 
  pull(all_vars)
  return(all_item_names)
}


compute_trait_score <- function(data, pos_items, rev_items = NULL) {
  if (is.null(rev_items)) {
    # If no reverse items are specified, just sum the positive items
    return(rowSums(data %>% select(all_of(pos_items)), na.rm = TRUE))
  } else {
    # If both positive and reverse items are specified
    rowSums(
      data %>% 
        select(all_of(c(pos_items, rev_items))) %>%
      #here the items are assumed to be on the scale of 1 to 5;
      #this function is only applied after ensuring that all items are
      #are measured on or a rescaled to 1to5 
        mutate(across(all_of(rev_items), ~ 6 - .x)),
      na.rm = TRUE
    )
  }
}

data1 <- all_data1 %>% 
  select(
    list_c(map(c("Isms","Globe", "Values", "Fanaticism", 
                 "Social_Axioms", "Failed_state_perception",
                 "Personality6","Personality7", "SWB"),
               item_names)), NATION9, age, genderml) %>% # nrow() = 2839
  # Retain rows where data for all five SWB items is present
  filter(if_all(item_names("SWB"), ~!is.na(.)))%>% # nrow() = 2815; 24 rows dropped
 #Removed Belarus data = 4
  filter(!NATION9 == 4) %>% 
  mutate(country = as.character(NATION9),
         genderml = as.character(genderml)) %>% 
   mutate(country= fct_recode(as.character(country),
           "USA"= "1",
           "Slovakia"= "3",
           "Serbia" = "2",
           "Chile" = "5",
           "Guatemala" = "6",
           "Malaysia" = "7", 
           "China" = "9", 
           "Korea"= "8"),
          gender = fct_recode(genderml,
           "female" = "0", "male" = "1"))%>% 
# Rescale all the Values and swb items to a range between 1 to 5
  mutate(across(c(all_of(item_names("Values")), all_of(item_names("SWB"))),
                ~scales::rescale(., to = c(1, 5)))) %>%
        select(-c(NATION9, genderml)) %>% 
  
      #---MODERATORs for Mindset -CNI---#
       #scP = scale Personality scores
  mutate(
    # Moderators - based on raw data for individuals
         #--Subjective Well-being 
             #compute_trait_score(data, pos_items, rev_items)         #sc - scale scores; scP = scale Personality scores
         sc_swb.indv = compute_trait_score(., item_names("SWB")),
         #--Personality
         scP_Consc.indv = compute_trait_score(., 
            c("p_01c1", "p_19c4"),   c("p_07c2", "p_13c3")),
         scP_Res.indv = compute_trait_score(., 
            c("p_08r2", "p_14r3"),   c("p_02r1", "p_20r4")),
         scP_Hon.indv = compute_trait_score(.,
            c("p_03h1", "p_09h2",   "p_21h4"), c("p_15h3", "p_25h5")),
         scP_Vir.indv = compute_trait_score(.,
            c("p_10v2", "p_16v3"),   c("p_04v1", "p_22v4")),
         scP_Agree.indv = compute_trait_score(., 
            c("p_23a4", "p_05a1"),   c("p_17a3", "p_11a2")),
         scP_Extra.indv = compute_trait_score(., 
            c("p_12e2", "p_18e3"),   c("p_06e1", "p_24e4")),
         #--Personality + Psychopathology(pp) 
         #(also argued to be a pty measure) 
         scP_Dis.indv =  compute_trait_score(., paste0("d_", 1:10))#Disintegration
  ) %>%

   #---MODERATORs for Personality-CNI---#
      #scM = scale Mindset scores
  mutate(
            #compute_trait_score(data, pos_items, rev_items) 
         #Isms
           #alpha = Tradition-oriented Religiousness
         scM_ism_alpha.indv = compute_trait_score(., 
            str_subset(item_names("Isms"),"^ism_a.*(?<!r)$"),  
            str_subset(item_names("Isms"), "^ism_a.+r$") 
           ),  
             
          # beta = Unmitigated Self-Interest
         scM_ism_beta.indv = compute_trait_score(., 
            str_subset(item_names("Isms"),"^ism_b.*(?<!r)$"), #(e.g., "ism_b1") 
            str_subset(item_names("Isms"), "^ism_b.+r$") #(e.g., "ism_b4r")
           ), 
             #gamma = Communal Rationalism
         scM_ism_gamma.indv = compute_trait_score(., 
            str_subset(item_names("Isms"),"^ism_g.*(?<!r)$"),  
            str_subset(item_names("Isms"), "^ism_g.+r$") 
           ),
            #delta = Inequality-Aversion
         scM_ism_delta.indv = compute_trait_score(., 
            str_subset(item_names("Isms"),"^ism_d.*(?<!r)$"),  
            str_subset(item_names("Isms"), "^ism_d.+r$") 
           ),

        #Globe  
          #traditional family structure
        scM_globe_tr.indv = compute_trait_score(.,
            str_subset(item_names("Globe"), "^g.*tr.*$")),
         #uncertainty avoidance
        scM_globe_un.indv = compute_trait_score(.,
            str_subset(item_names("Globe"), "^g.*un.*$")),
         #achievement orientation
        scM_globe_ac.indv = compute_trait_score(.,
            str_subset(item_names("Globe"), "^g.*ac.*$")),
         #assertiveness
        scM_globe_asrt.indv = compute_trait_score(.,
            str_subset(item_names("Globe"), "^g.*ag.*$")),
         #humane
        scM_globe_hu.indv = compute_trait_score(.,
            str_subset(item_names("Globe"), "^g.*hu.*$")),
        #masculinity
        scM_globe_ma.indv = compute_trait_score(.,
            str_subset(item_names("Globe"), "^g.*ma.*$")[-3],
            str_subset(item_names("Globe"), "^g.*ma.*$")[3]),
         #InGroupCollectivism
        scM_globe_gc.indv = compute_trait_score(.,
            str_subset(item_names("Globe"), "^g.*in.*$")),
         #power distance
        scM_globe_po.indv = compute_trait_score(.,
            str_subset(item_names("Globe"), "^g.*po.*$")), 
         #future orientation
        scM_globe_fu.indv = compute_trait_score(.,
            str_subset(item_names("Globe"), "^g.*fu.*$")[-c(3,4)], str_subset(item_names("Globe"), "^g.*fu.*$")[c(3,4)]), 
        
       #Fanaticism
        scM_fntc.indv = compute_trait_score(.,
            get_fntc_items("pos"), get_fntc_items("rev")),
          # yugoslavian extremism
          scM_fntcYug.indv = compute_trait_score(.,
            get_fntc_items("yug_extrm", "pos"),
             get_fntc_items("yug_extrm", "rev")),
         # islamic extremism
          scM_fntcIslam.indv = compute_trait_score(.,
            get_fntc_items("islam_extrm", "pos"),
             get_fntc_items("islam_extrm", "rev")),
        # pan-cultural extremism
          scM_fntcPan.indv = compute_trait_score(.,
            get_fntc_items("pan_extrm", "pos"),
             get_fntc_items("pan_extrm", "rev")),
       
       # divine power
          scM_fntc_dp.indv = compute_trait_score(.,
            get_fntc_items("divine_power", "pos"),
             get_fntc_items("divine_power", "rev")),
       
       # proviolence
          scM_fntc_pv.indv = compute_trait_score(.,
            get_fntc_items("proviolence", "pos"),
             get_fntc_items("proviolence", "rev")),
       
       # vile world
          scM_fntc_vw.indv = compute_trait_score(.,
            get_fntc_items("vile_world", "pos"),
             get_fntc_items("vile_world", "rev")),
       
      #Failed State Perception
        scM_fsp.indv = compute_trait_score(.,
        paste0("fsp_", c(1, 2, 4, 5, 7, 8, 10, 11, "3b", "7c","9b", "11b")), 
        paste0("fsp_", c(3,6,8,9,"1b", "7b","10b"))
        )

  ) %>% 
  mutate(pID = paste0("p", 1:nrow(.)))%>% 
  
  #compute community[here, country] scale scores
  with_groups(country, 
    mutate,
    across(
      # Select all pty and mindset scaled scores  
      contains(c( "scP", "scM", "sc_swb")),
      # Compute mean by country
      ~mean(., na.rm = TRUE),
      # Create new name [scP_Hon.indv -> scP_Hon.comm]
      .names = "{str_remove(.col, '[.].*')}.comm"
    )
  )
#Mindset CNI-data [ips.Mindset items + sc_swb + sc_pty.indv + sc_pty.comm]
#Personality CNI-data [ips.Personality items + sc_swb + sc_pty.indv + sc_pty.comm]
```


```{r tbl-DescriptiveTable}
#| label: tbl-descriptive
#| tbl-cap: "Descriptive statistics by Country"

data1 %>% 
  group_by(country) %>% 
  summarize(mean_age = mean(age, na.rm=TRUE),
            percent.male = mean(gender == "male", na.rm=TRUE)*100,
            N = n()) %>% 
  arrange(desc(N)) %>% 
  kable(format = "latex", 
        col.names = c("Country", "Mean Age", "% Male", "n"), 
        booktabs = TRUE)
```

@tbl-descriptive indicates the sample details for all eight countries in this dataset.

# Measurement Invariance - Subjective Well-being
SWB is one of the outcome predictors in this study which warrants measurement invariance procedure. 
```{r MeasurementInvariance-processing}
swb_MI.data <- data1 %>% 
  #swb items have been rescaled to a range of 1 to 5
  dplyr::select(starts_with("swb"), country)

swbModel = '
f1 =~ swb1 + swb2 + swb3 + swb4 + swb5
'
#-----Configural invariance-----#
swbModel.config <- measEq.syntax(
  configural.model = swbModel, 
  data = swb_MI.data, 
  group = "country") # column name of group variable

# fit the new model synatx to the data, 
fit.config <- cfa(as.character(swbModel.config), 
                  data = swb_MI.data, 
                  group = "country")

summary_config <- summary(fit.config, fit.measures = T)


#-----Metric invariance-----#
swbModel.metric <- measEq.syntax(
  configural.model = swbModel, 
  data = swb_MI.data, 
  group = "country",
  group.equal = c("loadings")) # column name of group variable


fit.metric <- cfa(as.character(swbModel.metric), 
                  data = swb_MI.data, 
                  group = "country")

summary_metric <- summary(fit.metric, fit.measures = T)

#-----Scalar invariance-----#
swbModel.scalar <- measEq.syntax(
  configural.model = swbModel, 
  data = swb_MI.data, 
  group = "country",
  group.equal = c("loadings", "intercepts")) # column name of group variable

fit.scalar <- cfa(as.character(swbModel.scalar), 
                  data = swb_MI.data, 
                  group = "country")

summary_scalar <- summary(fit.scalar, fit.measures = T)

#-----Strict invariance-----#
swbModel.strict <- measEq.syntax(
  configural.model = swbModel, 
  data = swb_MI.data, 
  group = "country",
  group.equal = c("loadings", "intercepts", "residuals")) # column name of group variable

fit.strict <- cfa(as.character(swbModel.strict), 
                  data = swb_MI.data, 
                  group = "country")


summary_strict <- summary(fit.strict, fit.measures = T)


#-----all fit stats-----#
fit_tbl <-  \(summary){
fit_stats <- c("chisq", "pvalue", "df",  "rmsea",  "rmsea.ci.lower", "rmsea.ci.upper", "srmr", "tli", "cfi")

get_all_fits <- \(summary, stat){
 fit_index <- summary$fit %>% 
   pluck(stat)
 formatted_index <- format(round(fit_index, 2), nsmall = 2)
    return(as.numeric(formatted_index))
}

df <- map2_df(.x = list(summary), .y = fit_stats, ~{
  tibble(fit_stats = .y, values = get_all_fits(.x, .y))
})

# Transform the data
 df <- df %>% 
    pivot_wider(names_from = "fit_stats", values_from = values) %>% 
    mutate(
      chisq = ifelse(pvalue < 0.05, glue("{chisq}**({df})"), glue("{chisq} ({df})")),
      RMSEA = glue("{rmsea} ({rmsea.ci.lower}, {rmsea.ci.upper})")
    ) %>% 
  dplyr::select(-pvalue, -df, -rmsea, - rmsea.ci.upper, -rmsea.ci.lower) %>% 
  rename("SRMR" = srmr,
         "TLI" = "tli",
         "CFI" = "cfi") %>% 
  dplyr::select(chisq, RMSEA, everything())

return(df)

}

# convert any input into a character string
convert_to_char <- \(...) {
  expr <- enquos(...)
  char_vector <- map_chr(expr, quo_name)
  return(char_vector)
}

#compute all the fit indices
MI_table <- map_df(list(summary_config, summary_metric, summary_scalar, summary_strict), .f = fit_tbl) %>% 
 #add invariance type col
  mutate(invariance_type = convert_to_char(Configural, Metric, Scalar, Strict),  .before = chisq) %>% 
 #add delta cols
 mutate(
    temp_RMSEA = as.numeric(str_extract(RMSEA, "\\d+\\.\\d+")),
    delta_CFI = c(NA, -diff(CFI)),
    delta_RMSEA = c(NA, diff(temp_RMSEA)),
    delta_SRMR = c(NA, diff(SRMR))
  ) %>%
  select(-temp_RMSEA)  

```

```{r MeasurementInvariance_Table}
#| label: tbl-MeasureMentInvariance
#| tbl-cap: "Measurement Invariance metrics for Subjective Well-being"

options(knitr.kable.NA = '')

MI_table %>% 
  kable(format = "latex", 
        booktabs = TRUE, 
        escape = FALSE, 
        col.names = c("Invariance type", "Chi square",
                      colnames(MI_table)[3:6], 
                      "Δ CFI", "Δ RMSEA", "Δ SRMR")) %>%
  kable_styling(latex_options = c("hold_position"))
```

Measurement invariance was assessed (@tbl-MeasureMentInvariance) for testing cross-cultural comparability of the 5-item Life Satisfaction scale measuring subjective well-being, across eight nations in Study 1. A series of increasingly constrained multi-group confirmatory factor analysis models were employed to evaluate configural, metric, scalar, and strict invariance.

- The `configural invariance` model, which tests for similarity in factor structure (pattern of zero and non-zero loadings) across groups showed acceptable fit (CFI = 0.94, TLI = 0.89, RMSEA = 0.13 \[90% CI: 0.11, 0.14\], SRMR = 0.04). While the CFI indicates acceptable fit (close to cutoff of ≥ 0.95), the TLI (based on typical cutoff for good fit: ≥ 0.95) and RMSEA (baed on typical cutoffs: < 0.05 for good fit, < 0.08 for reasonable fit) suggest some misfit.

- The `metric invariance` model, which constrains factor loadings to be equal across groups, demonstrated a slight decrease in fit (CFI = 0.92, TLI = 0.91, RMSEA = 0.12 \[90% CI: 0.11, 0.13\], SRMR = 0.0753). The change in CFI (ΔCFI = 0.02, exceeds the recommended threshold of ≤ 0.01, but within the more lenient threshold of ≤ 0.02) and RMSEA (ΔRMSEA = -0.0100, within acceptable limits of  ≤ 0.015), indicating partial support for metric invariance. 

- The `scalar invariance` model, which additionally constrains item intercepts to be equal across groups, showed a substantial decrease in fit (CFI = 0.78, TLI = 0.82, RMSEA = 0.17 \[90% CI: 0.16, 0.18\], SRMR = 0.13). The changes in fit indices (ΔCFI = 0.14, ΔRMSEA = 0.05, ΔSRMR = 0.05) far exceeded recommended thresholds, indicating that scalar invariance does not hold.

- The strict invariance model, which also constrains residual variances to be equal across groups, exhibited a further decline in fit (CFI = 0.54, TLI = 0.72, RMSEA = 0.21 \[90% CI: 0.2, 0.21\], SRMR = 0.16), indicating that strict invariance is not tenable. 

In summary, the SWB scale demonstrates partial support for configural and metric invariance across the eight nations, and there is evidence of non-invariance at scalar, and strict levels. These results suggest that while the basic structure of the scale could be similar across cultures, there may be differences in the strength of item-factor relationships, item intercepts, and item residuals across nations. Given the established complexity of SWB across cultures, we suggest that the readers approach the use of this construct with caution. 

# Analyses
## RQ1: Computing CNI

Using the approach by Weston et, al (2024), CNI is estimated using a random slope multilevel model (fixed intercepts; as the self and country responses have been ipsatized or standardized, the mean or the b0 will be zero) wherein the items are nested within persons. The ipsatization allows for the resulting slope estimates to be interpreted as correlation estimates.

Computing three types of CNI: - mindsetCNI: mindset variables - pty6CNI: six personality variables - pty7CNI: six personality variables + disintegration(paychopathology also considered as personality)

For study 1, six CNI models are computed:

:::{#note-CNI-models .callout-note title="CNI Models" icon=false}
1. Mindset CNI: consisting of all mindset items 
2. Isms CNI
3. Globe CNI: Original Globe items by House et al.
6. Fanaticism CNI
7. Social Axioms CNI
8. Personality 6 CNI: consisting of Big 6 items
8. Personality 7 CNI: Big 6 items + Disintegration items
:::

\*\*NOTE - write about ipsatization and controlling for overall mean when computing profile similarity analysis

To compute CNI's the data is processed in the following manner:
1.  Generate `z_ctry_responses`(Ipsatized/standardized within country responses)
2.  Generate `z_responses` (Ipsatized self rating responses; standardized within person)
3. To account for the normativity-desirability confound (NRC; Wood and Furr, 2016) we generate `Overall_M.responses` (Overall means of all items computed, uses Ipsatized self rating responses for all participants regardless of country). By adding this to the model we compute CNI estimates controlled for the overall mean profile that can confound the profile similarity between self-rating and country profiles. 

The data is retained in the long format. Each row consists of an item for each participant, country average response for each item and overall average for each item.

```{r funs.-model_CNI}
#FUNCTIONS for computing CNIs
 #Note: 1 here inidcates study 1

#item names for CNI type
get_item_names <- \(CNI_type, data) {
   
  domains <- switch(CNI_type,
    "Mindset" = c("Isms", "Fanaticism", "Social_Axioms", "Values", "Globe", "Failed_state_perception", "Values"),
    "pty6" = c("Personality6"),
    "pty7" = c("Personality6", "Personality7"),
    "Fanaticism" = c("Fanaticism"),
    "Isms" = c("Isms"),
    "Globe" = c("Globe"),
    stop("CNI type not found")
  )
  
  item_names <- data %>% 
    filter(domain %in% domains) %>% 
    pull(all_vars)
  
  if (length(item_names) == 0) {
    warning("No items found for the specified domains")
  }
  
  return(item_names)
}

#ipsatize/standardize scores
ipsatize <- \(x){
  value <- (x-mean(x, na.rm=T))/(sd(x, na.rm=T)) 
  return(value)
} 

#compute z_profiles for pID
compute_profiles <- \(var_names){
#compute mean country profiles
country_profiles <- data1 %>% 
  group_by(country) %>%
  summarise(
    across(all_of(var_names), ~mean(.x, na.rm = TRUE), .names = "avg_{.col}"),#variables for mindsetCNI
   n_p = n())%>% # number of participants) 
  ungroup() %>% 
  #retain participants who have responded to at least 30 items.- all the countries have n_p>30
  filter(n_p>=30) %>% 
   pivot_longer(
    cols = starts_with("avg_"),
    #item names stored in item
    names_to = "item",
    values_to = "ctry_response"
  ) %>% 
   mutate(item = str_remove(item, "avg_")) %>% 
ungroup()

self.ctry_profiles <-  data1 %>%
  select(all_of(var_names), pID, country) %>%
  pivot_longer(names_to = "item",
               values_to = "response",
               cols = all_of(var_names)) %>% 
  filter(!is.na(response)) %>%
  left_join(country_profiles, by = c("country", "item")) %>%
   filter(!is.na(ctry_response)) %>%
# ipsatize responses within profile 
  with_groups(pID, mutate, across(
    # mutate self-rating and mean country profiles for each pID at once
  contains("response"),
  # with the ipsatize function ,
  ipsatize,
  # create new name
.names = "z_{.col}")) 

overallM_profiles <- self.ctry_profiles %>% 
  select(item, z_response) %>%
  filter(!is.na(z_response)) %>%
  group_by(item) %>%
  summarise(overall.M = mean(z_response)) %>% 
  ungroup() 


return(lst(self.ctry_profiles, overallM_profiles)) #set_names() to the input object names

} 
```

```{r}
#get all item names for CNI types
mindsetCNI_items <- get_item_names("Mindset", all_vars_d)
pty6CNI_items <- get_item_names("pty6", all_vars_d)
pty7CNI_items <- get_item_names("pty7", all_vars_d)
ismCNI_items <- get_item_names("Isms", all_vars_d)
fantcCNI_items <- get_item_names("Fanaticism", all_vars_d)
globeCNI_items <- get_item_names("Globe", all_vars_d)


#compute pofiles for each CNI type
mindsetCNI_profiles <- compute_profiles(mindsetCNI_items)
pty6CNI_profiles <- compute_profiles(pty6CNI_items)
pty7CNI_profiles <- compute_profiles(pty7CNI_items)
ismCNI_profiles <- compute_profiles(ismCNI_items)
fantcCNI_profiles <- compute_profiles(fantcCNI_items)
globeCNI_profiles <- compute_profiles(globeCNI_items)
globeCNI_profiles <- compute_profiles(globeCNI_items)
```

```{r DONT-RUN-fit-all-cni-mods, eval=FALSE, echo=TRUE}
#computing CNI
add_CNIformula <- \(data){
  lmer(z_response ~ z_ctry_response + overall.M + (-1 + z_ctry_response|country/pID), data = data)
  }

mindsetCNI_mod <- mindsetCNI_profiles$self.ctry_profiles %>% 
  full_join(mindsetCNI_profiles$overallM_profiles, by = "item") %>% add_CNIformula(.)
  
pty6CNI_mod <- pty6CNI_profiles$self.ctry_profiles %>% 
  full_join(pty6CNI_profiles$overallM_profiles, by = "item") %>% add_CNIformula(.)

pty7CNI_mod <- pty7CNI_profiles$self.ctry_profiles %>% 
  full_join(pty7CNI_profiles$overallM_profiles, by = "item") %>% add_CNIformula(.)

ismCNI_mod <- ismCNI_profiles$self.ctry_profiles %>% 
  full_join(ismCNI_profiles$overallM_profiles, by = "item") %>% add_CNIformula(.)

fantcCNI_mod <- fantcCNI_profiles$self.ctry_profiles %>% 
  full_join(fantcCNI_profiles$overallM_profiles, by = "item") %>% add_CNIformula(.)

globeCNI_mod <- globeCNI_profiles$self.ctry_profiles %>% 
  full_join(globeCNI_profiles$overallM_profiles, by = "item") %>% add_CNIformula(.)

```

```{r save-CNImods, echo = F, eval = F}
save(mindsetCNI_mod, pty6CNI_mod,pty7CNI_mod,
     ismCNI_mod, fantcCNI_mod, globeCNI_mod,
     file = here("objects/Study1/all_CNI.mods_study1.Rdata"))
```

```{r load-CNImods, echo = F}
load(here("objects/Study1/all_CNI.mods_study1.Rdata"))
```




## Measuring Model Complexity

The Eight models vary in the number of items and domains of psychological measures. <\br>
1. The Parallel Analysis computed here, identify the optimum number of dimensions that the data for every CNI type can be reduced to. The optimum number of dimensions are retained based on the comparison of eigenvalues of the actual data and those of randomly generated data sets. Dimensions are retained when their eigenvalues exceed those of the random data, ensuring that only factors accounting for more variance than would be expected by chance are retained. 
2. Unrotated Principal Components that explain at least 50% of variance are identified. <\br>
These metrics provide quantitative measures of the underlying dimensionality and structure of each CNI.

```{r fun.-heterogeneity, message=FALSE, warning=FALSE}
# Function to calculate heterogeneity
compute_heterogeneity <- function(data) {
  # Compute correlation matrix once - memory efficient
  cor_matrix <- cor(data, use = "pairwise.complete.obs")
  
  pca_rotation <- function(rotation) {
    # Perform PCA using correlation matrix
    pca <- principal(cor_matrix, nfactors = ncol(data), rotate = rotation, covar = FALSE)
    
    # Calculate cumulative variance explained
    cumulative_var <- cumsum(pca$values) / sum(pca$values)
    
    # Find number of factors needed to explain at least 50% variance
    heterogeneity <- which(cumulative_var >= 0.5)[1]
    
    return(heterogeneity)
  }
  
  # Perform parallel analysis using correlation matrix
  pa_result <- fa.parallel(cor_matrix, n.obs = nrow(data), fa = "fa", fm = "minres", show.legend = FALSE, plot = FALSE)
  
  tibble(
    n_items = ncol(data),
    pa = pa_result$nfact,
    pca_50 = pca_rotation("none")
  )
}

heterogeneity_stats <- map_dfr(
  list(
   Mindset = select(data1, 
               get_item_names("mindset",
                              all_vars_d)),
  Globe = select(data1,
                get_item_names("Globe",
                              all_vars_d)),
   Isms = select(data1,
                get_item_names("Isms",
                              all_vars_d)),
   Fanaticism = select(data1,
                get_item_names("Fanaticism",
                              all_vars_d)),
   Personality6 = select(data1,
                get_item_names("pty6",
                              all_vars_d)),
   Personality7 = select(data1,
                get_item_names("pty7",
                              all_vars_d))
  
),
 compute_heterogeneity, .id = "cni_type"
)
```

```{r tbl-heterogeneity, results='asis'}
#| tbl-cap: "Model complexity"
#| label: tbl-heterogeneity

heterogeneity_stats %>% 
  kable(booktabs = T, 
        escape = F,
        format = "latex",
        col.names = c("CNI type", "No. items", "Parallel analysis", "PCA")) %>% 
  kable_styling() %>% 
     group_rows("Mindset", 1, 4) %>%
     group_rows("Personality", 5, 6) %>% 
   add_footnote("Note: Personality6 = Big 6 items; Personality7 = Big 6 items + Disintegration.", notation = "none")
```

```{r plot-heterogeneity, results='asis'}
#| fig-cap-location: bottom
#| fig-cap: "Model Complexity Measures Across CNI"
#| label: plot-heterogeneity

heterogeneity_stats %>%
  pivot_longer(cols = c(pa, pca_50), names_to = "metric", values_to = "value") %>%
  mutate(x_label = paste0(cni_type, "\n(", n_items, " items)")) %>% 
# Create the plot
ggplot(., aes(x = x_label, y = value, color = metric, group = metric)) +
  geom_line() +
  geom_point(size = 3) + 
  scale_color_manual(values = c("pa" = "#e78f8e", "pca_50" = "#93bfa6"),
                     labels = c("pa" = "Parallel Analysis", "pca_50" = "PCA 50%"),
                     name = "Metric") +
  labs(x = "CNI Type",
       y = "No. of Components") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "bottom",
        text = element_text(family="serif"))
```

```{r fun.-plot_CNI}
#Functions
#model1_est = tidy(model1, conf.int = T)

#this function does not work with map for some reason, the color mapping does not work!! 
plot_CNI <- function(model_obj) {
  # Get the name of the object passed to the function
  obj_name <- deparse(substitute(model_obj))
  
  # Extract the title (everything before the underscore)
  title <- str_extract(obj_name, "^[^_]+")
  
  # Define color mapping
  color_map <- tibble(
    mod_name = c("mindsetCNI", "ismCNI", "globeCNI", "fantcCNI", "pty6CNI", "pty7CNI"),
    color = c("#1e81b0", "#70d6ff", "#a7bed3", "#a0c4ff", "#ff7477", "#ff70a6")
  )
  
  # Determine the color based on the title
  plot_color <- color_map %>% 
    filter(str_detect(mod_name, title)) %>% 
    pull(color)
  
  model_obj= ismCNI_mod
  # Calculate slopes
  mod_slopes <- slopes(model_obj, variables = "z_ctry_response", by = "pID")
  
  coefficient_plot <- mod_slopes %>%
      ggplot(aes(x = reorder(pID, estimate), y = estimate)) +
      geom_segment(aes(xend = pID,
y = conf.low,yend = conf.high),
                   alpha = .08 , color = plot_color) +
      geom_point(size = .22, color = plot_color) +
      scale_x_discrete(breaks = NULL) +
      #coord_cartesian(ylim = c(-0.2, .92)) +
      labs(x = "Participant", y = "CNI coefficient", title = title) +
      theme_bw() +
    theme(text = element_text(family = "serif"))
  
   hist_plot <- mod_slopes %>%
    as.data.frame() %>%
    ggplot(aes(x = estimate)) +
    geom_histogram(binwidth = .03, color = "white", fill = plot_color) +
    labs(x = "CNI coefficient", y = "Frequency", title = title) +
    scale_x_continuous(limits = c(-0.3, 0.92))+
    theme_bw() +
    theme(text = element_text(family = "serif"))
  
  return(lst(coefficient_plot,hist_plot ))
}
```

```{r  DONT-RUN-CNIplots, results = 'asis', eval = FALSE}
mindsetCNI_plot <- plot_CNI(mindsetCNI_mod) 
ismCNI_plot <- plot_CNI(ismCNI_mod) 
globeCNI_plot <- plot_CNI(globeCNI_mod)
fantcCNI_plot <- plot_CNI(fantcCNI_mod)
pty6CNI_plot <- plot_CNI(pty6CNI_mod)
pty7CNI_plot <- plot_CNI(pty7CNI_mod)
```

```{r save-CNImods_plots, echo = F, eval = F}
save(mindsetCNI_plot, ismCNI_plot, globeCNI_plot, fantcCNI_plot, pty6CNI_plot, pty7CNI_plot, 
     file = here("objects/Study1/all_CNImods_plots.Rdata"))
```

```{r load-CNImods_plots, echo = F}
load(here("objects/Study1/all_CNImods_plots.Rdata"))
```



```{r fun.-patch_CNIplots, echo = FALSE}
patch_CNIplots <- \(plot_list){
  
  p1 <- plot_list$coefficient_plot & 
  theme(plot.title = element_blank())
  
  p2 <- plot_list$hist_plot & 
  theme(plot.title = element_blank())
  
  combined_plot <- p1 + p2
  
  return(combined_plot)
}

# info for walk
cni_plot_details <- tibble(
  cni_type = c("mindset", "ism", "globe", "fantc", "pty6", "pty7"), 
caption = c("Mindset CNI", "Isms-Mindset CNI", "Globe-Mindset CNI",
     "Fanaticism-Mindset CNI", "Personality6 CNI", "Personality7 CNI")) %>% 
  mutate(cni_mod = paste0(cni_type, "CNI_plot"))
```

```{r echo = FALSE}
#| fig-height: 4
#| fig-width: 10
#| out-width: "100%"
#| cap-location: bottom
#| fig-cap: 
#|   !expr cni_plot_details %>%
#|     pull(caption)

#retain models that have mindset moderators
cni_plot_details %>%
  pwalk(function(cni_mod,  ...) { 
    cat("\n\n")
    print(patch_CNIplots(get(cni_mod))) 
    cat("\n\n")
  })
```

```{r DONT-RUN-create-tbl-cni-mods, echo = T, eval = F}
CNImods_table1 <- modelsummary(
  list("Mindset" = mindsetCNI_mod,
       "Ism" = ismCNI_mod,
       "Globe" = globeCNI_mod,
       "Fanaticism" = fantcCNI_mod,
       "Pty6" = pty6CNI_mod,
       "Pty7" = pty7CNI_mod), 
             estimate = "{estimate}{stars}",
             statistic = "[{conf.low}, {conf.high}]",
            # group = group + term ~ model, 
             coef_omit = "Intercept|^status",
             coef_rename = c(
              "z_ctry_response" = "CNI",
               "overall.M" = "Overall Mean Profile",
               "SD (z_ctry_response pIDcountry)" = "SD of CNI (across people)",
               "SD (z_ctry_response country)" = "SD of CNI (across country)",
               "SD (Observations)" = ""),
             gof_map = c("nobs"), 
             fmt = "%.2f",
             output = "kableExtra") %>% 
 # latex_options = "HOLD_position") %>% 
  kable(format = "latex") %>% 
  add_header_above(c(" ", "Mindset" = 4, "Personality" = 2)) %>% 
   add_footnote(
    c("Pty6 = Big 6 personality items; Pty7 = Big 6 personality items + Disintegration"),
    notation = "none"
  ) %>%
  column_spec(6, extra_css = "position: relative;") %>%
  column_spec(7, extra_css = "position: relative;") 
```

```{r save-CNItable, echo = F, eval = F}
save(CNImods_table1,
     file = here("objects/Study1/CNImods_table1.Rdata"))
```

```{r load-CNItable, echo = F}
load(here("objects/Study1/CNImods_table1.Rdata"))
```

```{r tbl-cni-mods, results='asis', echo=F, eval=T}
#| tbl-cap: "Mindset and Perosnality Cultural Normativity Index (CNI) Models"
CNImods_table1 
```

```{r DONT-RUN-cni.ctry-trends, eval=F, echo=T}
#CNI country estimates from `slopes` (also can get CI's here) and `coef` (no CI's) are very close, both provide total effects (fixed+random)
#mindsetCNI_mod_ctry.slopes <- slopes(mindsetCNI_mod , variables = "z_ctry_response", by = "country")

all_mods_ctry.trends <- map_dfr(lst(
  mindsetCNI_mod, ismCNI_mod, globeCNI_mod,fantcCNI_mod,
  pty6CNI_mod, pty7CNI_mod), 
                 ~slopes(., variables = "z_ctry_response", by = "country"), .id = "model") 
```

```{r fun.-oneCoef-plot, echo = F, eval = F}
#One coefficient plot at a time!
plotCNI_ctry_trends <- \(slope_data){
  
  obj_name <- deparse(substitute(slope_data))
  title <- str_extract(obj_name, "^[^_]+")
  
  plot <- slope_data %>% 
  as_tibble() %>% 
  select(country, estimate, conf.low, conf.high) %>% 
   ggplot(aes(x = reorder(country,estimate), y = estimate)) +
   geom_errorbar(aes(ymin = conf.low, ymax = conf.high),
                color = "grey") +
   geom_point() + 
   scale_y_continuous(limits = c(0, 1)) +
   labs(x = NULL, 
        y = "CNI",
        title = paste0(title, " estimates across countries")) +
   coord_flip() +
   theme_bw() +
   theme(plot.title.position = "plot")
  
  return(plot)
}
#plotCNI_ctry_trends(mindsetCNI_mod_ctry.slopes)
```

```{r save-country-trends, echo = F, eval = F}
save(all_mods_ctry.trends,
     file = here("objects/Study1/CNI-ctry-trends1.Rdata"))
```

```{r load-country-trends, echo = F}
load(here("objects/Study1/CNI-ctry-trends1.Rdata"))
```

```{r ctry-trends-3models-plot}
#| fig-height: 8
#| fig-width: 10
#| out-width: "100%"
#| fig-cap: "CNI estimates across countries: Three CNIs"
#| fig-cap-location: bottom

all_mods_ctry.trends %>% 
  mutate(model = str_extract(model, "^[^_]+")) %>% 
  filter(model %in% c("mindsetCNI", "pty6CNI", "pty7CNI")) %>% 
  select(model, country, estimate, conf.low, conf.high) %>% 
  ggplot(aes(x = reorder(country, estimate), y = estimate, 
             color = model)) +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high),
                position = position_dodge(width = 0.5), 
                width = 0.3) +
  geom_point(position = position_dodge(width = 0.5), 
             size = 1.7)+ 
  scale_y_continuous(limits = c(0, 1)) +
  scale_color_manual(values = c("mindsetCNI" = "#1e81b0", 
     "pty6CNI" = "#ff7477", "pty7CNI" = "#ff70a6")) + 
  labs(x = NULL, 
       y = "CNI",
       color = "Model") +
  coord_flip() +
  theme_bw() +
  theme(plot.title.position = "plot",
        legend.position = "bottom",
        text = element_text(family = "serif", size = 13.7))
```

```{r ctry-trends-6models-plot}
#| fig-height: 8
#| fig-width: 10
#| out-width: "100%"
#| fig-cap: "CNI estimates across countries: Six CNIs"
#| fig-cap-location: bottom

all_mods_ctry.trends %>% 
  as_tibble() %>% 
  mutate(model = str_extract(model, "^[^_]+")) %>% 
  select(model, country, estimate, conf.low, conf.high) %>% 
  ggplot(aes(x = reorder(country, estimate), y = estimate, color = model, linetype = model)) +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high),
                position = position_dodge(width = 0.5), width = 0.4) +
  geom_point(position = position_dodge(width = 0.5), size = 1.7) + 
  scale_y_continuous(limits = c(0, 1)) +
  scale_color_manual(values = c("mindsetCNI" = "#1e81b0", "ismCNI"  = "#70d6ff", "globeCNI"  = "#a7bed3", "fantcCNI"  = "#a0c4ff", "pty6CNI" = "#ff7477", "pty7CNI" = "#ff70a6")) +
   scale_linetype_manual(values = c("globeCNI"  ="dashed", "ismCNI"  ="dashed", "fantcCNI"  ="dashed", "mindsetCNI" = "solid", "pty7CNI" = "solid","pty6CNI" = "solid")) +
  labs(x = NULL, y = "CNI", 
       color = "Model") +
  coord_flip() +
  theme_bw() +
  theme(plot.title.position = "plot",
        legend.position = "bottom",
        text = element_text(family = "serif", size = 13.7))+
  guides(linetype = "none")
```

# RQ 2: Associations between CNI and personality and mindset variables

CNI \~ Continuous moderators

```{r fun.-cni-mod-effects}
# Moderators here have to continuous, this won't work for categorical moderators
#Explanation for function below
      #[which CNI-type]:
  #cni_profiles_data <- mindsetCNI_profiles1$self.ctry_profiles 
      #[which moderator]:
  #modtr_pattern <- "^scP.*indv$" (scP = pty; scM = mindset)
      #[causal relationship]:
  #CNI <- Continuous moderator
cni.ContMod_effects <- \(cni_profiles_data, modtr_pattern){
  
#right data format
cni.modtr_data <- data1 %>% 
  #select moderator scales individual level (pID) scores 
  #---$select moderators$ - specify regex
  select(pID, matches(modtr_pattern)) %>% 
  #mean centering the moderator score cols
  #since this standardization is col-wise, running pty7 is not an issue
   mutate_if(is.numeric, 
             ~. - mean(., na.rm = T)) %>% 
  pivot_longer(-pID, 
                names_to = "modtr", #moderator name
                values_to = "modtr_score") %>% # moderator score
  full_join(cni_profiles_data, by = c("pID"), relationship = "many-to-many")

#CNI <- moderator
cni.modtr_models <- cni.modtr_data %>%
  tidyr::nest(data = -modtr) %>%
  mutate(
    #cni ~ mod
    mod.linear = map(data, ~lmer(z_response ~ z_ctry_response * modtr_score + (-1 + z_ctry_response | pID), data = .)),
    #cni ~ mod + mod^2
    mod.quadratic = map(data, ~lmer(z_response ~ z_ctry_response * modtr_score + z_ctry_response * I(modtr_score^2) + (-1 + z_ctry_response | pID), data = .)),
    
    #save results
    tidy_mod.linear = map(mod.linear, tidy, conf.int = T),
    tidy_mod.quadratic = map(mod.quadratic, tidy, conf.int = T)
  )

results_linear <- cni.modtr_models %>% 
  select(modtr, tidy_mod.linear) %>% 
  unnest(cols = c(tidy_mod.linear)) %>%
  filter(term == "z_ctry_response:modtr_score") %>% 
  select(modtr, term, estimate, conf.low, conf.high, p.value)

results_quadratic <- cni.modtr_models %>% 
  select(modtr, tidy_mod.quadratic) %>% 
  unnest(cols = c(tidy_mod.quadratic)) %>%
  filter(term == "z_ctry_response:I(modtr_score^2)") %>% 
  select(modtr, term, estimate, conf.low, conf.high, p.value)

return(lst(cni.modtr_models, results_linear, results_quadratic))

}

# cCNI.pty7_indv_try <- cni.ContMod_effects(
#   mindsetCNI_profiles$self.ctry_profiles, #cni profile
#   "^scP.*indv$") #moderators
```

```{r fun.-cni.ContMod_effects_tblData}
cni.ContMod_effects_tblData <- function(CNIprofile_data, variable_type) {
  if (variable_type == "personality") {
    var_pattern_indv <- "^scP.*indv$"
    var_pattern_comm <- "^scP.*comm$"
  } else if (variable_type == "mindset") {
    var_pattern_indv <- "^scM.*indv$"
    var_pattern_comm <- "^scM.*comm$"
  } else if (variable_type == "swb") {
    var_pattern_indv <- "^sc_swb.*indv$"
    var_pattern_comm <- "^sc_swb.*comm$"
  } else {
    stop("Invalid variable_type. Must be 'personality', 'mindset', or 'swb'.")
  }
  
  indv <- cni.ContMod_effects(
    CNIprofile_data$self.ctry_profiles, # cni profile
    var_pattern_indv # moderators
  )
  
  comm <- cni.ContMod_effects(
    CNIprofile_data$self.ctry_profiles, # cni profile
    var_pattern_comm # moderators
  )
  
  table <- bind_rows(
    Individual = indv$results_linear,
    Individual = indv$results_quadratic,
    Community = comm$results_linear,
    Community = comm$results_quadratic,
    .id = "level"
  )
  
  message(paste("Table ready for", deparse(substitute(CNIprofile_data)), "with variable type", variable_type))
  
  return(table)
}
```

```{r fun.-specify-var-names}
#function to specify the correct variable names for all moderators [Pty + Mindset + swb]
specify_var_names <- \(data){
  data %>% 
    mutate(
    modtr = case_when(
      
      #Personality
      str_detect(modtr, "Con") ~ "Conscientiousness",
      str_detect(modtr, "Hon") ~ "Honesty",
      str_detect(modtr, "Agr") ~ "Agreeableness",
      str_detect(modtr, "Res") ~ "Resilience",
      str_detect(modtr, "Ext") ~ "Extraversion",
      str_detect(modtr, "Vir") ~ "Originality/Virtuosity",
      str_detect(modtr, "Dis") ~ "Disintegration",
      
      #Mindset 
      str_detect(modtr, "ism_alpha") ~ "Alpha", 
      str_detect(modtr, "ism_beta") ~ "Beta",
      str_detect(modtr, "ism_gamma") ~ "Gamma",
      str_detect(modtr, "ism_delta") ~ "Delta",
      str_detect(modtr, "globe_tr") ~ "Traditional family structure",
      str_detect(modtr, "globe_un") ~ "Uncertainty avoidance",   
      str_detect(modtr, "globe_ac") ~ "Achievement orientation",
      str_detect(modtr, "globe_ag") ~ "Aggression", 
      str_detect(modtr, "globe_hu") ~ "Humane",
      str_detect(modtr, "globe_ma") ~ "Masculinity",
      str_detect(modtr, "globe_in") ~ "Individualism",
      str_detect(modtr, "globe_po") ~ "Power distance",
      str_detect(modtr, "globe_fu") ~ "Future orientation",
      str_detect(modtr, "fntc\\.") ~ "Fanaticism",
      str_detect(modtr, "fntcYug") ~ "Extremism - Yugoslavia",
      str_detect(modtr, "fntcIslam") ~ "Extremism - Islam",
      str_detect(modtr, "fntcPan") ~ "Extremism - pan-cultural",
      str_detect(modtr, "fntc_dp") ~ "Divine Power",
      str_detect(modtr, "fntc_pv") ~ "Proviolence",
      str_detect(modtr, "fntc_vw") ~ "Vile world",
      str_detect(modtr, "fsp") ~ "Failed state perception",
      
      #Subjective well-being 
      str_detect(modtr, "swb") ~ "Subjective Well-being",
      TRUE ~ modtr
    )
  ) 
}
```

```{r cni.ContMod_tblNames}
#generate inputs for cni.ContMod_effects_tblData
#ismCNI.mindset <- cni.ContMod_effects_tblData(ismCNI_profiles, "mindset")
#lot of models call for such measures!
cni.ContMod_tblNames <- tibble(table_name = c(
                       "mindsetCNI.pty7", "mindsetCNI.mindset" ,
                      "ismCNI.pty7", "ismCNI.mindset",
                       "globeCNI.pty7", "globeCNI.mindset",
                       "fantcCNI.pty7", "fantcCNI.mindset",
                       "pty6CNI.pty7", "pty6CNI.mindset",
                       "pty7CNI.pty7", "pty7CNI.mindset")
                      ) %>%
  mutate(
    cni_type = paste0(str_extract(table_name, "^[^.]+"), "_profiles"),
    
    variable_type = case_when(
      str_extract(table_name, "[^.]+$") == "pty7" ~ "personality",
      str_extract(table_name, "[^.]+$") == "mindset" ~ "mindset",
      TRUE ~ NA_character_
    )
  )
```

```{r DONT-RUN-cni.ContMod-effects, echo = F, eval = F}
#CNI <- continuous moderator
#takes forever! ~33mins
cni.ContMod_tables <- map2(
  .x = cni.ContMod_tblNames$cni_type,
  .y = cni.ContMod_tblNames$variable_type,
  .f = function(x, y) {
    # Use get() to retrieve the object by its name
    data <- get(x)
    
    # Call the function with the retrieved data and the variable type
    cni.ContMod_effects_tblData(data, y)
  }
) %>% 
  # Set names of the resulting list
  set_names(cni.ContMod_tblNames$table_name)

```

```{r save-cni.ContMod-effects, echo = F, eval = F}
save(cni.ContMod_tables,
     file = here("objects/Study1/cni.ContMod_tables1.Rdata"))
```

```{r load-cni.ContMod-effects-tbl, echo = F}
#takes a while to load
load(here("objects/Study1/cni.ContMod_tables1.Rdata"))
# [~33mins to load] 4:26pm start - end 4:58pm end
```

```{r}
cni.ContMod_effects_table <- \(data, title){

df1 <- data %>% 
    #specify the correct variable/moderator name
  #pluck(cni.ContMod_tables , "mindsetCNI.pty7") %>% 
    specify_var_names()%>% 
    mutate(
    p.value = map_chr(p.value, papaja::printp),
    across(where(is.numeric), ~ round(., 3)),
  ci = paste0("[", conf.low, ", ", conf.high,"]"),
         term = ifelse(str_detect(term, "2"), "Quadratic", "Linear"),
    estimate = as.character(estimate) 
  ) %>% 
  select(level, modtr, term, estimate, ci, p.value) %>% 
  pivot_longer(cols = c(estimate, ci, p.value),  names_to = "stat", values_to = "stat_value") %>% 
  unite(term, term, stat) %>% 
  pivot_wider(names_from = term, values_from = stat_value) %>% 
  arrange(level) %>%
  select(-level)

 # Calculate the number of rows for each level
no.modtrs <- df1 %>% 
  distinct(modtr) %>% 
  nrow()

df1 %>% 
  kable(booktabs = T, 
        escape = F,
        format = "latex",
        col.names = c(" ", "Est", "95\\% CI", "$\\textit{p}$", "Est", "95\\% CI", "$\\textit{p}$"),
        caption = title) %>% 
  kable_styling() %>% 
  add_header_above(c(" ", "Linear (b)" = 3, "Quadratic (b^2)" = 3)) %>% 
     group_rows("Individual level", 1, no.modtrs) %>% 
  group_rows("Country level", no.modtrs+1, no.modtrs*2) 
 
}
```

```{r cni.ContMod_tbl_details}
cni.ContMod_tbl_details <-  cni.ContMod_tblNames %>% 
  mutate(caption_part = rep(pull(cni_plot_details, caption), each = 2),
         caption = paste0("Association between ",caption_part, " and ", variable_type, " traits"),
         title = str_replace_all(table_name , "\\.", "~")) %>% 
  select(table_name, title, caption, variable_type)
```

```{r cni.ContMod-tbls, echo = F, eval=T, results='asis'}
#retain models that have mindset moderators
cni.ContMod_tbl_details %>%
  pwalk(function(table_name, caption, ...) {
    cat("\n\n")
    print(
      pluck(cni.ContMod_tables, table_name) %>% 
        cni.ContMod_effects_table(., caption)
    )
    cat("\n\n")
  })
```

```{r fun.-plot-cni.ContMod}
#"Moderating effects on CNI: Individual vs Community"
cni.pty_effects_plot <-\(data){

data %>% 
  #only linear effects
  filter(term == "z_ctry_response:modtr_score") %>% 
  specify_var_names() %>% 
  with_groups(modtr, ~ mutate(.x, avg_abs_estimate = mean(abs(estimate)))) %>% 
  mutate(
    modtr = fct_reorder(modtr, avg_abs_estimate, .desc = FALSE),
    color = case_when(
      modtr == "Conscientiousness" ~ "C",
      modtr == "Honesty" ~ "H",
      modtr == "Agreeableness" ~ "A",
      modtr == "Resilience" ~ "R",
      modtr == "Extraversion" ~ "E",
      modtr == "Originality/Virtuosity" ~ "O",
      modtr == "Disintegration" ~ "D",
      TRUE ~ "Other"),
    sig = case_when(
      p.value < .05 & estimate > 0 ~ "Pos",
      p.value < .05 & estimate < 0 ~ "Neg",
      TRUE ~ "NOT")
  ) %>%
  ggplot(aes(x = modtr, y = estimate, fill = color, alpha = level)) +
  geom_col(position = position_dodge(width = 0.8)) +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), 
                position = position_dodge(width = 0.8),
                width = 0.25) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
 scale_fill_manual(values = c(
   "C" = "#ff6f91",
   "H" = "#377EB8",
   "A" = "#008f7a",
   "R" = "#e6d021",
   "E" = "#d7573b",
   "O" = "#c67533",
   "D" = "#646199"
 )) +
  scale_alpha_manual(values = c("Individual" = 1, "Community" = 0.4)) +
  labs(x = "Moderator", y = "Estimate",
      # title = title,
       fill = "Trait", alpha = "Level") +
  theme_bw() +
  theme(legend.position = "bottom", 
        text = element_text(family = "serif", size = 14)) +
  coord_flip() +
  guides(fill = "none")  
} #, title

cni.mindset_effects_plot <- \(data){

data %>% 
#only linear effects
  filter(term == "z_ctry_response:modtr_score") %>%
   specify_var_names() %>%
   with_groups(modtr, ~ mutate(.x, avg_abs_estimate = mean(abs(estimate)))) %>% 
   mutate(
         modtr = fct_reorder(modtr, avg_abs_estimate, .desc = FALSE),
     color = case_when(
     modtr == "Alpha" ~ "Isms",
     modtr == "Beta" ~ "Isms",
     modtr == "Gamma" ~ "Isms",
     modtr == "Delta" ~ "Isms",
     modtr == "Traditional family structure" ~ "Globe",
     modtr == "Uncertainty avoidance" ~ "Globe",
     modtr == "Achievement orientation" ~ "Globe",
     modtr == "Aggression" ~ "Globe",
     modtr == "Humane" ~ "Globe", 
     modtr == "Masculinity" ~ "Globe",
     modtr == "Individualism" ~ "Globe",
     modtr == "Power distance" ~ "Globe",
     modtr == "Future orientation" ~ "Globe",
     modtr == "Fanaticism" ~ "Fanaticism",
     modtr == "Extremism - Yugoslavia" ~ "Fanaticism",
     modtr == "Extremism - Islam"  ~ "Fanaticism",
     modtr == "Extremism - pan-cultural" ~ "Fanaticism",
     modtr == "Divine Power" ~ "Fanaticism",
     modtr == "Proviolence" ~ "Fanaticism",
     modtr == "Vile world" ~ "Fanaticism",
     modtr == "Failed state perception" ~ "Failed state"),
     
     sig = case_when(
       p.value < .05 & estimate > 0 ~ "Pos",
       p.value < .05 & estimate < 0 ~ "Neg",
       TRUE ~ "NOT")) %>%
  ggplot(aes(x = modtr, y = estimate, fill = color, alpha = level)) +
  geom_col(position = position_dodge(width = 0.8)) +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), position = position_dodge(width = 0.8),
 width = 0.25) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
scale_fill_manual(values = c(
 "Isms" = "#ff6f91",
 "Globe" = "#377EB8",
 "Fanaticism" = "#008f7a",
 "Failed state" = "#646199"
)) +
  scale_alpha_manual(values = c("Individual" = 1, "Community" = 0.4)) +
  labs(x = "Moderator", y = "Estimate",
    #   title = title,
       fill = "Trait", alpha = "Level") +
  theme_bw() +
  theme(legend.position = "bottom",
        text = element_text(family = "serif", size = 13.7)) +
  coord_flip()

} #, title
```

```{r}
#| fig-height: 7
#| fig-width: 10
#| out-width: "100%"
#| fig-cap-location: bottom
#| fig-cap: 
#|   !expr cni.ContMod_tbl_details %>%
#|   filter(variable_type == "personality") %>% 
#|     pull(caption)

cni.ContMod_tbl_details %>%
  filter(variable_type == "personality") %>% 
  pull(table_name) %>%
  walk(\(table_name) {
    cat("\n\n")
    print(
      pluck(cni.ContMod_tables, table_name) %>% 
        cni.pty_effects_plot())
    cat("\n\n")
  })
```

```{r echo = F, eval=T}
#| fig-height: 12
#| fig-width: 10
#| out-width: "100%"
#| fig-cap-location: bottom
#| fig-cap: 
#|   !expr cni.ContMod_tbl_details %>%
#|   filter(variable_type == "mindset") %>% 
#|     pull(caption)

cni.ContMod_tbl_details %>%
  filter(variable_type == "mindset") %>% 
  pull(table_name) %>%
  walk(\(table_name) {
    cat("\n\n")
    print(
      pluck(cni.ContMod_tables, table_name) %>% 
        cni.mindset_effects_plot())
    cat("\n\n")
  })
```

# RQ3.1: CNI\~well-being

```{r DONT-RUN-swb-effects, echo = T, eval = F}
cni.swbMod_tblNames <- tibble(table_name = c("mindsetCNI.swb", "ismCNI.swb", "globeCNI.swb", "fantcCNI.swb", "pty6CNI.swb", "pty7CNI.swb")) %>%
  mutate(
    cni_type = paste0(str_extract(table_name, "^[^.]+"), "_profiles"),
    variable_type =  str_extract(table_name, "[^.]+$")
    )

cni.swbMod_tables <- map2(
  .x = cni.swbMod_tblNames$cni_type,
  .y = cni.swbMod_tblNames$variable_type,
  .f = function(x, y) {
    # Use get() to retrieve the object by its name
    data <- get(x)
    
    # Call the function with the retrieved data and the variable type
    cni.ContMod_effects_tblData(data, y)
  }
) %>% 
  # Set names of the resulting list
  set_names(cni.swbMod_tblNames$table_name)
```

```{r save-cni.swb-effects, echo = F, eval = F}
save(cni.swbMod_tables,
 file = here("objects/Study1/cni.swbMod_tables.Rdata"))
```

```{r load-cni.swbMod-effects, echo = F}
#takes a while to load
load(here("objects/Study1/cni.swbMod_tables.Rdata"))
```

```{r table-cni.swb_effects}
cni.swbMod_tables %>%
  imap(~mutate(.x, cni_type = .y, .before = level)) %>%
  list_rbind() %>% 
  arrange(desc(level)) %>% 
  specify_var_names()%>% 
    mutate(
    p.value = map_chr(p.value, papaja::printp),
    across(where(is.numeric), ~ round(., 3)),
  ci = paste0("[", conf.low, ", ", conf.high,"]"),
         term = ifelse(str_detect(term, "2"), "Quadratic", "Linear "),
    estimate = as.character(estimate) ) %>% 
  select(level, cni_type, modtr, term, estimate, ci, p.value) %>% 
  pivot_longer(cols = c(estimate, ci, p.value), names_to = "stat", values_to = "stat_value") %>% 
  unite(term, term, stat) %>% 
  pivot_wider(names_from = term, values_from = stat_value) %>% 
  select(-modtr, -level) %>% 
    kable(booktabs = T, 
        escape = F,
        format = "latex",
        col.names = c(" ", "Est", "95\\% CI", "$\\textit{p}$", "Est", "95\\% CI", "$\\textit{p}$"),
        caption = "Association between CNI and Subjective well-being") %>% 
  kable_styling() %>% 
  add_header_above(c(" ", "Linear (b)" = 3, "Quadratic (b^2)" = 3)) %>% 
     group_rows("Individual level", 1, 6) %>%
     group_rows("Country level", 7, 12) 
```

```{r fun.-plot-cni.swb_effects}
cni.swb_effects_plot <- \(data, title){
#swb_try_data %>% 
data %>% 
#only linear effects
  filter(term == "z_ctry_response:modtr_score") %>%
   specify_var_names() %>%
   with_groups(modtr, ~ mutate(.x, avg_abs_estimate = mean(abs(estimate)))) %>% 
   mutate(
         modtr = fct_reorder(modtr, avg_abs_estimate, .desc = FALSE),
     color = case_when(
     cni_type == "mindsetCNI" ~ "Mindset CNI",
     cni_type == "ismCNI" ~ "Isms-Mindset CNI",
     cni_type == "globeCNI" ~ "Globe-Mindset CNI",
     cni_type == "fantcCNI" ~ "Fanaticism-Mindset CNI",
     cni_type == "pty6CNI" ~ "Personality 6 CNI",
     cni_type == "pty7CNI" ~ "Personality 7 CNI"),
     sig = case_when(
       p.value < .05 & estimate > 0 ~ "Pos",
       p.value < .05 & estimate < 0 ~ "Neg",
       TRUE ~ "NOT")) %>%
  ggplot(aes(x = cni_type, y = estimate, fill = color, alpha = level)) +
  geom_col(position = position_dodge(width = 0.8)) +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), position = position_dodge(width = 0.8),
 width = 0.25) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
scale_fill_manual(values = c(
 "Fanaticism-Mindset CNI" = "#a0c4ff",
 "Mindset CNI" = "#1e81b0",
 "Isms-Mindset CNI" = "#70d6ff",
 "Globe-Mindset CNI" = "#1E90FF",
 "Fanaticism-Mindset CNI" ="#4B9CD3",
 "Personality 6 CNI" = "#ff7477",
 "Personality 7 CNI" = "#ff70a6"
)) +
  scale_alpha_manual(values = c("Individual" = 1, "Community" = 0.4)) +
  labs(x = "CNI type",
       title = title,
       fill = "CNI type", alpha = "Level") +
  theme_bw() +
  theme(legend.position = "bottom",
        axis.title.x = element_blank(), 
        text = element_text(family = "serif", size = 11)) +
  coord_flip()

}
```

```{r plot-cni.swb_effects}
#| fig-height: 6
#| fig-width: 10
#| out-width: "100%"
cni.swbMod_tables %>% 
  imap(~mutate(.x, cni_type = .y, .before = level)) %>%
  list_rbind() %>% 
  arrange(desc(level)) %>% 
  mutate(cni_type = str_remove(cni_type, "\\..*$"), .before = level) %>% 
  cni.swb_effects_plot(., "CNI ~ swb")+
  guides(fill = "none")
```

# RQ3.2: Well-being \~ CNI

To what extent can CNI predict well-being

```{r swb.cni-lmer, eval=TRUE}
compute_swb.cni_mods_lmer <- \(cni_mod){
  data <- coef(cni_mod)$pID %>%
  as.data.frame() %>%
  mutate(pID = rownames(.)) %>%
  select(-`(Intercept)`) %>% 
  separate(pID, into = c("pID", "country")) %>% 
  rename(CNI = z_ctry_response) %>% 
  full_join(data1)
  
  linear.indv <- lmer(sc_swb.indv ~ CNI + (1 | country), data = data)
  
  linear.comm <- lmer(sc_swb.comm ~ CNI + (1 | country), data = data)
  
  quadratic.indv <- lmer(sc_swb.indv ~ CNI + I(CNI^2) + (1 | country), data = data)
  
   quadratic.comm <- lmer(sc_swb.comm ~ CNI + I(CNI^2) + (1 | country), data = data)
  
  return(lst(linear.indv,linear.comm,
             quadratic.indv, quadratic.comm))
   
}

all_swb.cni_mods <- map(
  lst(mindsetCNI_mod, ismCNI_mod, globeCNI_mod,fantcCNI_mod,
  pty6CNI_mod, pty7CNI_mod), 
  compute_swb.cni_mods_lmer) 
```

```{r DONT-RUN-swb.cni_mods_heterosk, echo = T, eval = F}
 library(whitestrap)

compute_heterosk_swb.cni <- \(cni_mod){
  
  data <- coef(cni_mod)$pID %>%
  as.data.frame() %>%
  mutate(pID = rownames(.)) %>%
  select(-`(Intercept)`) %>% 
  separate(pID, into = c("pID", "country")) %>% 
  rename(CNI = z_ctry_response) %>% 
  full_join(data1)
  
  linear_lm <- lm(sc_swb.indv ~ CNI, data = data)
  
  linear_heterosk <- white_test_boot(linear_lm)
  
  quadratic_lm <- lm(sc_swb.indv ~ CNI + CNI^2, data = data)
  
  quadratic_heterosk <- white_test_boot(quadratic_lm)
  
  return(lst(linear_lm, linear_heterosk,  quadratic_lm, quadratic_heterosk))
  
}

all_swb.cni_mods_heterosk <- map(
  lst(mindsetgCNI_mod, ismCNI_mod, globeCNI_mod,fantcCNI_mod,
  pty6CNI_mod, pty7CNI_mod), 
  
  compute_heterosk_swb.cni) 
```

```{r save-swb.cni_mods_heterosk, echo = F, eval = F}
save(all_swb.cni_mods_heterosk,
 file = here("objects/Study1/swb.cni_mods_heterosk.Rdata"))
```

```{r load-swb.cni_mods_heterosk, echo = F}
#takes a while to load
load(here("objects/Study1/swb.cni_mods_heterosk.Rdata"))
```

```{r}
make_swb.cni_heterosk_tbl <- \(mod_name) {
  list(
    model = mod_name,
    
    w_stat_linear = all_swb.cni_mods_heterosk[[mod_name]]$linear_heterosk$w_stat,
    p_value_linear = all_swb.cni_mods_heterosk[[mod_name]]$linear_heterosk$p_value,
    w_stat_quadratic = all_swb.cni_mods_heterosk[[mod_name]]$quadratic_heterosk$w_stat,
    p_value_quadratic = all_swb.cni_mods_heterosk[[mod_name]]$quadratic_heterosk$p_value
  )
}

swb.cni_heterosk_tbl <- map_dfr(convert_to_char(mindsetCNI_mod, ismCNI_mod, globeCNI_mod,fantcCNI_mod,
  pty6CNI_mod, pty7CNI_mod), make_swb.cni_heterosk_tbl)
```

```{r}
swb.cni_heterosk_tbl %>% 
  mutate(model=str_extract(model, "^[^CNI]+")) %>% 
  kable(booktabs = T,
        escape = F,
        format = "latex",
        col.names = c("Model", "W", "p", "W", "p")) %>%
  kable_styling() %>%
  add_header_above(c(" ", "Linear (b)" = 2, "Quadratic (b^2)" = 2)) %>% 
   footnote(general = paste0(
    "Linear model: sc_swb.indv CNI; ",
    "Quadratic model: sc_swb.indv CNI + CNI^2"), general_title = "Note:", title_format = "italic", 
    fixed_small_size = TRUE,
           footnote_as_chunk = FALSE,
           threeparttable = TRUE)
```

```{r}
plot_swb.cni <- \(model) {
  library(sjPlot)
  
  # Extract the formula from the model
  model_formula <- formula(model)
  
  # Check if the term CNI^2 is present in the formula
  is_quadratic <- grepl("CNI\\^2", deparse(model_formula))
  
  # Set the color based on the type of model
  if (is_quadratic) {
    plot_color <- "#E97140"
  } else {
    plot_color <- "#cc254f"
  }
  
  # Generate the plot
  plot_model(model, type = "pred", terms = c("CNI[all]"), colors = plot_color) +
    scale_y_continuous(limits = c(14, 20)) +
    scale_x_continuous(limits = c(-.4, 1)) +
    theme_bw()+
    labs(x = "CNI", y = "SWB")+
    theme(plot.title = element_blank())
}
  
all_swb.cni_plots <- map_depth(
  .x = all_swb.cni_mods,
  .depth = 2,
  .f = plot_swb.cni)

  
plot_swb.cni_patch <- \(model){
  plots <- all_swb.cni_plots%>% 
  pluck(model) %>% 
  set_names(c("li", "lc", "qi", "qc"))
  
  # title <- str_extract(model, "^[^_]+")
  
  plots$li + 
  plots$qi + 
 # plot_layout(axis_titles = "collect")+
  plot_annotation(
  #  title = title ,
      tag_levels = list(c("Linear", "Quadratic"))) &  
  theme(
    plot.tag.position = c("top"),
    plot.caption = element_markdown(size = 12), 
    text = element_text("serif")
  )
}
```

```{r}
cni_mod_obj.names <- tibble(cni_type = c("mindset", "ism", "globe", "fantc", "pty6", "pty7")) %>% 
  mutate(cni_mod = paste0(cni_type, "CNI_mod"),
         caption = paste0("Association between ", cni_type, " CNI and Subjective Well-being" ))
```

```{r}
#| fig-height: 4
#| fig-width: 10
#| out-width: "100%"
#| cap-location: bottom
#| fig-cap: 
#|   !expr cni_mod_obj.names %>%
#|     pull(caption)

#retain models that have mindset moderators
cni_mod_obj.names %>%
  pull(cni_mod) %>% 
  walk(~{
    cat("\n\n")  
    print(plot_swb.cni_patch(.x))
    cat("\n\n") 
  })
```
